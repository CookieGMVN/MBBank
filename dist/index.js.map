{"version":3,"sources":["../src/index.ts","../src/MB.ts","../src/utils/Global.ts","../src/utils/LoadWasm.ts"],"sourcesContent":["/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2024 CookieGMVN and contributors\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nimport MB from \"./MB\";\r\n\r\nexport { MB };","/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2024 CookieGMVN and contributors\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nimport { createHash } from \"node:crypto\";\r\n\r\nimport Jimp from \"jimp\";\r\nimport moment from \"moment\";\r\nimport { recognize } from \"node-tesseract-ocr\";\r\nimport replaceColor from \"replace-color\";\r\nimport { Client } from \"undici\";\r\n\r\nimport { FreeOcrRes } from \"./typings/FreeOcrApi\";\r\nimport { BalanceData, BalanceList, TransactionInfo } from \"./typings/MBApi\";\r\nimport { CaptchaResponse } from \"./typings/MBLogin\";\r\nimport { defaultHeaders, defaultTesseractConfig, FPR, generateDeviceId, getTimeNow } from \"./utils/Global\";\r\nimport wasmEnc from \"./utils/LoadWasm\";\r\n\r\n/**\r\n * Main client class for all activities.\r\n */\r\nexport default class MB {\r\n    /**\r\n     * @readonly\r\n     * Your MB account username.\r\n    */\r\n    public readonly username: string;\r\n\r\n    /**\r\n     * @readonly\r\n     * Your MB account username.\r\n    */\r\n    public readonly keyApi: string | undefined;\r\n\r\n    /**\r\n    * @readonly\r\n    * Your MB account password.\r\n    */\r\n    public readonly password: string;\r\n\r\n    /**\r\n     * @private\r\n     * MB-returned Session ID. Use it to validate the request.\r\n    */\r\n    private sessionId: string | null | undefined;\r\n\r\n    /**\r\n    * @private\r\n    * Your non-unique, time-based Device ID.\r\n    */\r\n    private deviceId: string = generateDeviceId();\r\n\r\n    /**\r\n     * Undici client. Use it for sending the request to API.\r\n     */\r\n    public client = new Client(\"https://online.mbbank.com.vn\");\r\n\r\n    /**\r\n     * WASM Buffer, downloaded from MB.\r\n     */\r\n    private wasmData!: Buffer;\r\n\r\n    /**\r\n     * Login to your MB account via username and password.\r\n     * @param data - Your MB Bank login credentials: username and password.\r\n     * @param data.username Your MB Bank login username, usually your registered phone number.\r\n     * @param data.password Your MB Bank login password.\r\n     * @param data.keyApi see more at https://ocr.space/ocrapi\r\n     */\r\n    public constructor(data: { username: string, password: string, keyApi?: string }) {\r\n        if (!data.username || !data.password) throw new Error(\"You must define at least a MB account to use with this library!\");\r\n\r\n        this.keyApi = data.keyApi;\r\n        this.username = data.username;\r\n        this.password = data.password;\r\n    }\r\n\r\n    /**\r\n     * A private function to process MB's captcha and get Session ID.\r\n     */\r\n    private async login(): Promise<boolean> {\r\n        // Request ID/Ref ID for MB\r\n        const rId = getTimeNow();\r\n\r\n        const headers = defaultHeaders as any;\r\n        headers[\"X-Request-Id\"] = rId;\r\n\r\n        const captchaReq = await this.client.request({\r\n            method: \"POST\",\r\n            path: \"/api/retail-web-internetbankingms/getCaptchaImage\",\r\n            headers,\r\n            body: JSON.stringify({\r\n                \"sessionId\": \"\",\r\n                \"refNo\": rId,\r\n                \"deviceIdCommon\": this.deviceId,\r\n            }),\r\n        });\r\n\r\n        const captchaRes: CaptchaResponse = await captchaReq.body.json() as CaptchaResponse;\r\n\r\n\r\n        let captchaContent = '';\r\n        if (this.keyApi) {\r\n            captchaContent = await this.solveCAPTCHAwithFreeOcrApi(captchaRes.imageString);\r\n        }\r\n        else {\r\n            captchaContent = await this.solveCAPTCHAwithLocal(captchaRes.imageString);\r\n        }\r\n\r\n        // wasm\r\n        if (!this.wasmData) {\r\n            const wasm = await this.client.request({\r\n                method: \"GET\",\r\n                path: \"/assets/wasm/main.wasm\",\r\n                headers: defaultHeaders,\r\n            });\r\n            this.wasmData = Buffer.from(await wasm.body.arrayBuffer());\r\n        }\r\n\r\n        // Create Data\r\n        const requestData = {\r\n            userId: this.username,\r\n            password: createHash(\"md5\").update(this.password).digest(\"hex\"),\r\n            captcha: captchaContent,\r\n            ibAuthen2faString: FPR,\r\n            sessionId: null,\r\n            refNo: getTimeNow(),\r\n            deviceIdCommon: this.deviceId,\r\n        };\r\n\r\n        const loginReq = await this.client.request({\r\n            method: \"POST\",\r\n            path: \"/api/retail_web/internetbanking/v2.0/doLogin\",\r\n            headers: defaultHeaders,\r\n            body: JSON.stringify({\r\n                dataEnc: await wasmEnc(this.wasmData, requestData, \"0\"),\r\n            }),\r\n        });\r\n\r\n        const loginRes = await loginReq.body.json() as any;\r\n\r\n        if (!loginRes.result) {\r\n            throw new Error(\"Login failed: Unknown data\");\r\n        }\r\n\r\n        if (loginRes.result.ok) {\r\n            this.sessionId = loginRes.sessionId;\r\n            return true;\r\n        }\r\n        else if (loginRes.result.responseCode === \"GW283\") {\r\n            // Again...\r\n            return this.login();\r\n        }\r\n        else {\r\n            const e = new Error(\"Login failed: (\" + loginRes.result.responseCode + \"): \" + loginRes.result.message) as any;\r\n            e.code = loginRes.result.responseCode;\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A private function to calculate the reference ID required by MB.\r\n     * @returns The reference ID that is required by MB.\r\n     */\r\n    private getRefNo() {\r\n        return `${this.username}-${getTimeNow()}`;\r\n    }\r\n\r\n    private async solveCAPTCHAwithFreeOcrApi(base64img: string) {\r\n        const formdata = new FormData();\r\n            formdata.append(\"apikey\", this.keyApi);\r\n            formdata.append(\"base64Image\", \"data:image/png;base64,\" + base64img);\r\n            formdata.append(\"language\", \"eng\");\r\n            formdata.append(\"OCREngine\", \"2\");\r\n\r\n            const requestOptions : RequestInit = {\r\n                method: \"POST\",\r\n                body: formdata,\r\n                redirect: \"follow\",\r\n            };\r\n\r\n            const ocrRes = await fetch(\"https://api.ocr.space/parse/image\", requestOptions);\r\n\r\n            if (ocrRes.status !== 200) {\r\n                throw new Error('lỗi api');\r\n            }\r\n\r\n            const jsonData : FreeOcrRes = await ocrRes.json() as FreeOcrRes;\r\n\r\n            const captchaContent = (jsonData.ParsedResults[0]?.ParsedText || \"\").replaceAll(\"\\n\", \"\").replaceAll(\" \", \"\");\r\n\r\n            return captchaContent;\r\n    }\r\n\r\n    /**\r\n     * giải captch\r\n     * @returns string\r\n     */\r\n    private async solveCAPTCHAwithLocal(base64img: string) {\r\n        let captchaBuffer = Buffer.from(base64img, \"base64\");\r\n\r\n        // Remove the first line with static hex code\r\n        const captchaImagePRCLine1 = await replaceColor({\r\n            image: captchaBuffer,\r\n            colors: {\r\n                type: \"hex\",\r\n                targetColor: \"#847069\",\r\n                replaceColor: \"#ffffff\",\r\n            },\r\n        });\r\n\r\n        captchaBuffer = await captchaImagePRCLine1.getBufferAsync(Jimp.MIME_PNG);\r\n\r\n        // Remove the second line with static hex code\r\n        const captchaImagePRCLine2 = await replaceColor({\r\n            image: captchaBuffer,\r\n            colors: {\r\n                type: \"hex\",\r\n                targetColor: \"#ffe3d5\",\r\n                replaceColor: \"#ffffff\",\r\n            },\r\n        });\r\n\r\n        captchaBuffer = await captchaImagePRCLine2.getBufferAsync(Jimp.MIME_PNG);\r\n\r\n        // tại sao lại có .slice(0, -1);\r\n        const captchaContent = (await recognize(captchaBuffer, defaultTesseractConfig)).replaceAll(\"\\n\", \"\").replaceAll(\" \", \"\").slice(0, -1);\r\n        return captchaContent;\r\n    }\r\n\r\n    private async mbRequest(data: { path: string, json?: object, headers?: object }) {\r\n        if (!this.sessionId) {\r\n            await this.login();\r\n            this.mbRequest(data);\r\n        }\r\n\r\n        const rId = this.getRefNo();\r\n\r\n        const headers = defaultHeaders as any;\r\n        headers[\"X-Request-Id\"] = rId;\r\n        headers[\"Deviceid\"] = this.deviceId,\r\n            headers[\"Refno\"] = rId;\r\n\r\n        const defaultBody = {\r\n            \"sessionId\": this.sessionId,\r\n            \"refNo\": rId,\r\n            \"deviceIdCommon\": this.deviceId,\r\n        };\r\n        const body = Object.assign(defaultBody, data.json);\r\n\r\n        const httpReq = await this.client.request({\r\n            method: \"POST\",\r\n            path: data.path,\r\n            headers,\r\n            body: JSON.stringify(body),\r\n        });\r\n\r\n        const httpRes = await httpReq.body.json() as any;\r\n\r\n        if (!httpRes.result) {\r\n            this.getBalance();\r\n        }\r\n        else if (httpRes.result.ok == true) return httpRes;\r\n        else if (httpRes.result.responseCode === \"GW200\") {\r\n            await this.login();\r\n            this.mbRequest(data);\r\n        }\r\n        else {\r\n            throw new Error(\"Request failed (\" + httpRes.result.responseCode + \"): \" + httpRes.result.message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets your account's balance info.\r\n     * @returns Your MB account's balance object.\r\n     */\r\n    public async getBalance(): Promise<BalanceList | undefined> {\r\n        const balanceData = await this.mbRequest({ path: \"/api/retail-web-accountms/getBalance\" });\r\n\r\n        if (!balanceData) return;\r\n\r\n        const balance: BalanceList = {\r\n            totalBalance: balanceData.totalBalanceEquivalent,\r\n            currencyEquivalent: balanceData.currencyEquivalent,\r\n            balances: [],\r\n        };\r\n\r\n        balanceData.acct_list.forEach((acctInfo: unknown) => {\r\n            const acct = acctInfo as any;\r\n\r\n            const balanceData: BalanceData = {\r\n                number: acct.acctNo,\r\n                name: acct.acctNm,\r\n                currency: acct.ccyCd,\r\n                balance: acct.currentBalance,\r\n            };\r\n\r\n            balance.balances?.push(balanceData);\r\n        });\r\n\r\n        balanceData.internationalAcctList.forEach((acctInfo: unknown) => {\r\n            const acct = acctInfo as any;\r\n\r\n            const balanceData: BalanceData = {\r\n                number: acct.acctNo,\r\n                name: acct.acctNm,\r\n                currency: acct.ccyCd,\r\n                balance: acct.currentBalance,\r\n            };\r\n\r\n            balance.balances?.push(balanceData);\r\n        });\r\n\r\n        return balance;\r\n    }\r\n\r\n    /**\r\n     * Gets all your transactions on MB.\r\n     * @param data The data that function requires.\r\n     * @param data.accountNumber The MB's account number needs to be checked.\r\n     * @param data.fromDate The date you want to start looking up, format dd/mm/yyyy. Make sure this is not smaller than 90 days from the ending date.\r\n     * @param data.toDate The date you want to end the lookup, format dd/mm/yyyy. Make sure this is not bigger than 90 days from the starting date.\r\n     * @returns TransactionInfo object as an array, see TransactionInfo for more details.\r\n     *\r\n     * @example\r\n     * If you want to get transactions history from account \"1234567890\", from 1/12/2023 to 1/1/2024:\r\n     * ```ts\r\n     * <MB>.getTransactionsHistory({ accountNumber: \"1234567890\", fromDate: \"1/12/2023\", toDate: \"1/1/2024\" });\r\n     * ```\r\n     */\r\n    public async getTransactionsHistory(data: { accountNumber: string, fromDate: string, toDate: string }): Promise<TransactionInfo[] | undefined> {\r\n        if (moment().day() - moment(data.fromDate, \"D/M/YYYY\").day() > 90 || moment().day() - moment(data.fromDate, \"D/M/YYYY\").day() > 90) throw new Error(\"Date formatting error: Max transaction history must be shorter than 90 days!\");\r\n        if (moment(data.fromDate, \"DD/MM/YYYY\").day() - moment(data.toDate, \"D/M/YYYY\").day() > 90) throw new Error(\"Date formatting error: Max transaction history must be shorter than 90 days!\");\r\n\r\n        const body = {\r\n            \"accountNo\": data.accountNumber,\r\n            \"fromDate\": moment(data.fromDate, \"D/M/YYYY\").format(\"DD/MM/YYYY\"),\r\n            \"toDate\": moment(data.toDate, \"D/M/YYYY\").format(\"DD/MM/YYYY\"),\r\n        };\r\n\r\n        const historyData = await this.mbRequest({ path: \"/api/retail-transactionms/transactionms/get-account-transaction-history\", json: body });\r\n\r\n        if (!historyData || !historyData.transactionHistoryList) return;\r\n\r\n        const transactionHistories: TransactionInfo[] = [];\r\n\r\n        historyData.transactionHistoryList.forEach((transactionRaw: unknown) => {\r\n\r\n            const transaction = transactionRaw as any;\r\n\r\n            const transactionData: TransactionInfo = {\r\n                postDate: transaction.postingDate,\r\n                transactionDate: transaction.transactionDate,\r\n                accountNumber: transaction.accountNo,\r\n                creditAmount: transaction.creditAmount,\r\n                debitAmount: transaction.debitAmount,\r\n                transactionCurrency: transaction.currency,\r\n                transactionDesc: transaction.description,\r\n                balanceAvailable: transaction.availableBalance,\r\n                refNo: transaction.refNo,\r\n                toAccountName: transaction.benAccountName,\r\n                toBank: transaction.bankName,\r\n                toAccountNumber: transaction.benAccountName,\r\n                type: transaction.transactionType,\r\n            };\r\n\r\n            transactionHistories.push(transactionData);\r\n        });\r\n\r\n        return transactionHistories;\r\n    }\r\n}\r\n","/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2024 CookieGMVN and contributors\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nimport moment from \"moment\";\r\n\r\nexport function getTimeNow(): string {\r\n    return moment().format(\"YYYYMMDDHHmmss\" + moment().millisecond().toString().slice(0, -1));\r\n}\r\n\r\nexport function generateDeviceId() {\r\n    return \"s1rmi184-mbib-0000-0000-\" + getTimeNow();\r\n}\r\n\r\nexport const defaultHeaders = {\r\n    'Cache-Control': 'no-cache',\r\n    'Accept': 'application/json, text/plain, */*',\r\n    'Authorization': 'Basic RU1CUkVUQUlMV0VCOlNEMjM0ZGZnMzQlI0BGR0AzNHNmc2RmNDU4NDNm',\r\n    'User-Agent': \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36\",\r\n    \"Origin\": \"https://online.mbbank.com.vn\",\r\n    \"Referer\": \"https://online.mbbank.com.vn/\",\r\n    \"Content-Type\": \"application/json; charset=UTF-8\",\r\n    app: \"MB_WEB\",\r\n};\r\n\r\nexport const defaultTesseractConfig = {\r\n    lang: \"eng\",\r\n    oem: 1,\r\n    psm: 12,\r\n};\r\n\r\nexport const FPR = \"c7a1beebb9400375bb187daa33de9659\";","/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2024 CookieGMVN and contributors\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/* eslint-disable */\r\n// @ts-nocheck\r\n\r\nglobalThis.location = new URL(\"https://online.mbbank.com.vn/pl/login\");\r\n\r\nconst processAsync = (param1, param2, generatorFunction) =>\r\n    new Promise((resolve, reject) => {\r\n        var handleResult = (result) => {\r\n            try {\r\n                processStep(generatorFunction.next(result));\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        },\r\n            handleError = (error) => {\r\n                try {\r\n                    processStep(generatorFunction.throw(error));\r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n            },\r\n            processStep = (step) =>\r\n                step.done\r\n                    ? resolve(step.value)\r\n                    : Promise.resolve(step.value).then(handleResult, handleError);\r\n        processStep(\r\n            (generatorFunction = generatorFunction.apply(param1, param2)).next(),\r\n        );\r\n    });\r\n\r\n(() => {\r\n    const ErrENOSYS = () => {\r\n        const err = new Error(\"not implemented\");\r\n        err.code = \"ENOSYS\";\r\n        return err;\r\n    };\r\n    if (!globalThis.fs) {\r\n        let data = \"\";\r\n        globalThis.fs = {\r\n            constants: {\r\n                O_WRONLY: -1,\r\n                O_RDWR: -1,\r\n                O_CREAT: -1,\r\n                O_TRUNC: -1,\r\n                O_APPEND: -1,\r\n                O_EXCL: -1,\r\n            },\r\n            writeSync(fd, buffer) {\r\n                data += TextDecoderUnicode.decode(buffer);\r\n                const indexEOL = data.lastIndexOf(\"\\n\");\r\n                if (indexEOL != -1) {\r\n                    console.log(data.substring(0x0, indexEOL));\r\n                    data = data.substring(indexEOL + 0x1);\r\n                }\r\n                return buffer.length;\r\n            },\r\n            write(fd, buffer, offset, length, position, callback) {\r\n                if (offset === 0 && length === buffer.length && position === null) {\r\n                    callback(null, this.writeSync(fd, buffer));\r\n                } else {\r\n                    callback(ErrENOSYS());\r\n                }\r\n            },\r\n            fsync(fd, callback) {\r\n                callback(null);\r\n            },\r\n        };\r\n    }\r\n    if (!globalThis.process) {\r\n        globalThis.process = {\r\n            getuid: () => -1,\r\n            getgid: () => -1,\r\n            geteuid: () => -1,\r\n            getegid: () => -1,\r\n            pid: -1,\r\n            ppid: -1,\r\n        };\r\n    }\r\n    if (!globalThis.crypto) {\r\n        throw new Error(\r\n            \"globalThis.crypto is not available, polyfill required (crypto.getRandomValues only)\",\r\n        );\r\n    }\r\n    if (!globalThis.performance) {\r\n        throw new Error(\r\n            \"globalThis.performance is not available, polyfill required (performance.now only)\",\r\n        );\r\n    }\r\n    if (!globalThis.TextEncoder) {\r\n        throw new Error(\r\n            \"globalThis.TextEncoder is not available, polyfill required\",\r\n        );\r\n    }\r\n    if (!globalThis.TextDecoder) {\r\n        throw new Error(\r\n            \"globalThis.TextDecoder is not available, polyfill required\",\r\n        );\r\n    }\r\n\r\n    const TextEncoderUnicode = new TextEncoder(\"utf-8\");\r\n    const TextDecoderUnicode = new TextDecoder(\"utf-8\");\r\n\r\n    globalThis.Go = class {\r\n        constructor() {\r\n            this.argv = [\"js\"];\r\n            this.env = {};\r\n            this.exit = (exitCode) => {\r\n                if (exitCode !== 0) {\r\n                    console.warn(\"exit code:\", exitCode);\r\n                }\r\n            };\r\n            this._exitPromise = new Promise((resolve) => {\r\n                this._resolveExitPromise = resolve;\r\n            });\r\n            this._pendingEvent = null;\r\n            this._scheduledTimeouts = new Map();\r\n            this._nextCallbackTimeoutID = 1;\r\n\r\n            const setMemoryValue = (address, value) => {\r\n                this.mem.setUint32(address + 0x0, value, true);\r\n                this.mem.setUint32(\r\n                    address + 0x4,\r\n                    Math.floor(value / 0x100000000),\r\n                    true,\r\n                );\r\n            };\r\n\r\n            const getValueFromMemory = (address) => {\r\n                const floatValue = this.mem.getFloat64(address, true);\r\n                if (floatValue === 0) {\r\n                    return;\r\n                }\r\n                if (!isNaN(floatValue)) {\r\n                    return floatValue;\r\n                }\r\n                const intValue = this.mem.getUint32(address, true);\r\n                return this._values[intValue];\r\n            };\r\n\r\n            const setValueInMemory = (address, value) => {\r\n                if (typeof value === \"number\" && value !== 0) {\r\n                    if (isNaN(value)) {\r\n                        this.mem.setUint32(address + 0x4, 0x7ff80000, true);\r\n                        this.mem.setUint32(address, 0x0, true);\r\n                    } else {\r\n                        this.mem.setFloat64(address, value, true);\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                if (value === undefined) {\r\n                    this.mem.setFloat64(address, 0x0, true);\r\n                    return;\r\n                }\r\n\r\n                let id = this._ids.get(value);\r\n                if (id === undefined) {\r\n                    id = this._idPool.pop();\r\n                    if (id === undefined) {\r\n                        id = this._values.length;\r\n                    }\r\n                    this._values[id] = value;\r\n                    this._goRefCounts[id] = 0;\r\n                    this._ids.set(value, id);\r\n                }\r\n                this._goRefCounts[id]++;\r\n\r\n                let typeFlag = 0;\r\n                switch (typeof value) {\r\n                    case \"object\":\r\n                        if (value !== null) {\r\n                            typeFlag = 1;\r\n                        }\r\n                        break;\r\n                    case \"string\":\r\n                        typeFlag = 2;\r\n                        break;\r\n                    case \"symbol\":\r\n                        typeFlag = 3;\r\n                        break;\r\n                    case \"function\":\r\n                        typeFlag = 4;\r\n                }\r\n\r\n                this.mem.setUint32(address + 0x4, 0x7ff80000 | typeFlag, true);\r\n                this.mem.setUint32(address, id, true);\r\n            };\r\n\r\n            const getByteArrayFromMemory = (address) => {\r\n                const startAddress =\r\n                    this.mem.getUint32(address + 0x0, true) +\r\n                    0x100000000 * this.mem.getInt32(address + 0x4, true);\r\n\r\n                const length =\r\n                    this.mem.getUint32(address + 0x8, true) +\r\n                    0x100000000 * this.mem.getInt32(address + 0xc, true);\r\n\r\n                return new Uint8Array(\r\n                    this._inst.exports.mem.buffer,\r\n                    startAddress,\r\n                    length,\r\n                );\r\n            };\r\n\r\n            const getArrayFromMemory = (address) => {\r\n                const startAddress =\r\n                    this.mem.getUint32(address + 0x0, true) +\r\n                    0x100000000 * this.mem.getInt32(address + 0x4, true);\r\n\r\n                const length =\r\n                    this.mem.getUint32(address + 0x8, true) +\r\n                    0x100000000 * this.mem.getInt32(address + 0xc, true);\r\n\r\n                const array = new Array(length);\r\n                for (let i = 0; i < length; i++) {\r\n                    array[i] = getValueFromMemory(startAddress + 0x8 * i);\r\n                }\r\n\r\n                return array;\r\n            };\r\n\r\n            const getStringFromMemory = (address) => {\r\n                const startAddress =\r\n                    this.mem.getUint32(address + 0x0, true) +\r\n                    0x100000000 * this.mem.getInt32(address + 0x4, true);\r\n\r\n                const length =\r\n                    this.mem.getUint32(address + 0x8, true) +\r\n                    0x100000000 * this.mem.getInt32(address + 0xc, true);\r\n\r\n                return TextDecoderUnicode.decode(\r\n                    new DataView(this._inst.exports.mem.buffer, startAddress, length),\r\n                );\r\n            };\r\n\r\n            const timeDifference = Date.now() - performance.now();\r\n\r\n            this.importObject = {\r\n                _gotest: {\r\n                    add: (a, b) => a + b,\r\n                },\r\n                gojs: {\r\n                    \"runtime.wasmExit\": (input) => {\r\n                        const exitCode = this.mem.getInt32(0x8 + (input >>>= 0x0), true);\r\n                        this.exited = true;\r\n                        delete this._inst;\r\n                        delete this._values;\r\n                        delete this._goRefCounts;\r\n                        delete this._ids;\r\n                        delete this._idPool;\r\n                        this.exit(exitCode);\r\n                    },\r\n                    \"runtime.wasmWrite\": (address) => {\r\n                        const fileDescriptor =\r\n                            this.mem.getUint32(0x8 + (address >>>= 0x0) + 0x0, true) +\r\n                            0x100000000 *\r\n                            this.mem.getInt32(0x8 + (address >>>= 0x0) + 0x4, true);\r\n\r\n                        const dataAddress =\r\n                            this.mem.getUint32(address + 0x10 + 0x0, true) +\r\n                            0x100000000 * this.mem.getInt32(address + 0x10 + 0x4, true);\r\n\r\n                        const dataLength = this.mem.getInt32(address + 0x18, true);\r\n\r\n                        fs.writeSync(\r\n                            fileDescriptor,\r\n                            new Uint8Array(\r\n                                this._inst.exports.mem.buffer,\r\n                                dataAddress,\r\n                                dataLength,\r\n                            ),\r\n                        );\r\n                    },\r\n                    \"runtime.resetMemoryDataView\": (_0x1fc0dd) => {\r\n                        this.mem = new DataView(this._inst.exports.mem.buffer);\r\n                    },\r\n                    \"runtime.nanotime1\": (_0x5843c4) => {\r\n                        setMemoryValue(\r\n                            0x8 + (_0x5843c4 >>>= 0x0),\r\n                            0xf4240 * (timeDifference + performance.now()),\r\n                        );\r\n                    },\r\n                    \"runtime.walltime\": (_0x431dd5) => {\r\n                        _0x431dd5 >>>= 0x0;\r\n                        const _0x2d1628 = new Date().getTime();\r\n                        setMemoryValue(_0x431dd5 + 0x8, _0x2d1628 / 0x3e8);\r\n                        this.mem.setInt32(\r\n                            _0x431dd5 + 0x10,\r\n                            (_0x2d1628 % 0x3e8) * 0xf4240,\r\n                            true,\r\n                        );\r\n                    },\r\n                    \"runtime.scheduleTimeoutEvent\": (_0x40be90) => {\r\n                        _0x40be90 >>>= 0x0;\r\n                        const _0x4d23db = this._nextCallbackTimeoutID;\r\n                        this._nextCallbackTimeoutID++;\r\n                        this._scheduledTimeouts.set(\r\n                            _0x4d23db,\r\n                            setTimeout(() => {\r\n                                for (this._resume(); this._scheduledTimeouts.has(_0x4d23db);) {\r\n                                    console.warn(\"scheduleTimeoutEvent: missed timeout event\");\r\n                                    this._resume();\r\n                                }\r\n                            }, this.mem.getUint32(_0x40be90 + 0x8 + 0x0, true) + 0x100000000 * this.mem.getInt32(_0x40be90 + 0x8 + 0x4, true)),\r\n                        );\r\n                        this.mem.setInt32(_0x40be90 + 0x10, _0x4d23db, true);\r\n                    },\r\n                    \"runtime.clearTimeoutEvent\": (_0x4d392b) => {\r\n                        const _0x157834 = this.mem.getInt32(\r\n                            0x8 + (_0x4d392b >>>= 0x0),\r\n                            true,\r\n                        );\r\n                        clearTimeout(this._scheduledTimeouts.get(_0x157834));\r\n                        this._scheduledTimeouts[\"delete\"](_0x157834);\r\n                    },\r\n                    \"runtime.getRandomData\": (_0xfc09b6) => {\r\n                        crypto.getRandomValues(\r\n                            getByteArrayFromMemory(0x8 + (_0xfc09b6 >>>= 0x0)),\r\n                        );\r\n                    },\r\n                    \"syscall/js.finalizeRef\": (_0x5edca4) => {\r\n                        const _0x57d4fc = this.mem.getUint32(\r\n                            0x8 + (_0x5edca4 >>>= 0x0),\r\n                            true,\r\n                        );\r\n                        this._goRefCounts[_0x57d4fc]--;\r\n                        if (this._goRefCounts[_0x57d4fc] === 0x0) {\r\n                            const _0x372c88 = this._values[_0x57d4fc];\r\n                            this._values[_0x57d4fc] = null;\r\n                            this._ids[\"delete\"](_0x372c88);\r\n                            this._idPool.push(_0x57d4fc);\r\n                        }\r\n                    },\r\n                    \"syscall/js.stringVal\": (_0x11c7ea) => {\r\n                        setValueInMemory(\r\n                            0x18 + (_0x11c7ea >>>= 0x0),\r\n                            getStringFromMemory(_0x11c7ea + 0x8),\r\n                        );\r\n                    },\r\n                    \"syscall/js.valueGet\": (_0x3c119c) => {\r\n                        _0x3c119c >>>= 0x0;\r\n                        const _0x57d3f0 = Reflect.get(\r\n                            getValueFromMemory(_0x3c119c + 0x8),\r\n                            getStringFromMemory(_0x3c119c + 0x10),\r\n                        );\r\n                        _0x3c119c = this._inst.exports.getsp() >>> 0x0;\r\n                        setValueInMemory(_0x3c119c + 0x20, _0x57d3f0);\r\n                    },\r\n                    \"syscall/js.valueSet\": (_0x2df90d) => {\r\n                        _0x2df90d >>>= 0x0;\r\n                        Reflect.set(\r\n                            getValueFromMemory(_0x2df90d + 0x8),\r\n                            getStringFromMemory(_0x2df90d + 0x10),\r\n                            getValueFromMemory(_0x2df90d + 0x20),\r\n                        );\r\n                    },\r\n                    \"syscall/js.valueDelete\": (_0x5c6169) => {\r\n                        _0x5c6169 >>>= 0x0;\r\n                        Reflect.deleteProperty(\r\n                            getValueFromMemory(_0x5c6169 + 0x8),\r\n                            getStringFromMemory(_0x5c6169 + 0x10),\r\n                        );\r\n                    },\r\n                    \"syscall/js.valueIndex\": (_0xd5cf7e) => {\r\n                        setValueInMemory(\r\n                            0x18 + (_0xd5cf7e >>>= 0x0),\r\n                            Reflect.get(\r\n                                getValueFromMemory(_0xd5cf7e + 0x8),\r\n                                this.mem.getUint32(_0xd5cf7e + 0x10 + 0x0, true) +\r\n                                0x100000000 * this.mem.getInt32(_0xd5cf7e + 0x10 + 0x4, true),\r\n                            ),\r\n                        );\r\n                    },\r\n                    \"syscall/js.valueSetIndex\": (_0x1b938f) => {\r\n                        _0x1b938f >>>= 0x0;\r\n                        Reflect.set(\r\n                            getValueFromMemory(_0x1b938f + 0x8),\r\n                            this.mem.getUint32(_0x1b938f + 0x10 + 0x0, true) +\r\n                            0x100000000 * this.mem.getInt32(_0x1b938f + 0x10 + 0x4, true),\r\n                            getValueFromMemory(_0x1b938f + 0x18),\r\n                        );\r\n                    },\r\n                    \"syscall/js.valueCall\": (_0x38baf6) => {\r\n                        _0x38baf6 >>>= 0x0;\r\n                        try {\r\n                            const _0xb55714 = getValueFromMemory(_0x38baf6 + 0x8);\r\n                            const _0x4b45ac = Reflect.get(\r\n                                _0xb55714,\r\n                                getStringFromMemory(_0x38baf6 + 0x10),\r\n                            );\r\n                            const _0x929c90 = getArrayFromMemory(_0x38baf6 + 0x20);\r\n                            const _0x331ca0 = Reflect.apply(_0x4b45ac, _0xb55714, _0x929c90);\r\n                            _0x38baf6 = this._inst.exports.getsp() >>> 0x0;\r\n                            setValueInMemory(_0x38baf6 + 0x38, _0x331ca0);\r\n                            this.mem.setUint8(_0x38baf6 + 0x40, 0x1);\r\n                        } catch (_0x3b2cd8) {\r\n                            _0x38baf6 = this._inst.exports.getsp() >>> 0x0;\r\n                            setValueInMemory(_0x38baf6 + 0x38, _0x3b2cd8);\r\n                            this.mem.setUint8(_0x38baf6 + 0x40, 0x0);\r\n                        }\r\n                    },\r\n                    \"syscall/js.valueInvoke\": (_0x19f35b) => {\r\n                        _0x19f35b >>>= 0x0;\r\n                        try {\r\n                            const _0xdd2a3 = getValueFromMemory(_0x19f35b + 0x8);\r\n                            const _0x330c8f = getArrayFromMemory(_0x19f35b + 0x10);\r\n                            const _0x49e23c = Reflect.apply(_0xdd2a3, undefined, _0x330c8f);\r\n                            _0x19f35b = this._inst.exports.getsp() >>> 0x0;\r\n                            setValueInMemory(_0x19f35b + 0x28, _0x49e23c);\r\n                            this.mem.setUint8(_0x19f35b + 0x30, 0x1);\r\n                        } catch (_0x5bd1fc) {\r\n                            _0x19f35b = this._inst.exports.getsp() >>> 0x0;\r\n                            setValueInMemory(_0x19f35b + 0x28, _0x5bd1fc);\r\n                            this.mem.setUint8(_0x19f35b + 0x30, 0x0);\r\n                        }\r\n                    },\r\n                    \"syscall/js.valueNew\": (_0x275c5e) => {\r\n                        _0x275c5e >>>= 0x0;\r\n                        try {\r\n                            const _0x2a547b = getValueFromMemory(_0x275c5e + 0x8);\r\n                            const _0x3fcde3 = getArrayFromMemory(_0x275c5e + 0x10);\r\n                            const _0x94eb67 = Reflect.construct(_0x2a547b, _0x3fcde3);\r\n                            _0x275c5e = this._inst.exports.getsp() >>> 0x0;\r\n                            setValueInMemory(_0x275c5e + 0x28, _0x94eb67);\r\n                            this.mem.setUint8(_0x275c5e + 0x30, 0x1);\r\n                        } catch (_0x5b3614) {\r\n                            _0x275c5e = this._inst.exports.getsp() >>> 0x0;\r\n                            setValueInMemory(_0x275c5e + 0x28, _0x5b3614);\r\n                            this.mem.setUint8(_0x275c5e + 0x30, 0x0);\r\n                        }\r\n                    },\r\n                    \"syscall/js.valueLength\": (_0x2cc204) => {\r\n                        setMemoryValue(\r\n                            0x10 + (_0x2cc204 >>>= 0x0),\r\n                            parseInt(getValueFromMemory(_0x2cc204 + 0x8).length),\r\n                        );\r\n                    },\r\n                    \"syscall/js.valuePrepareString\": (_0x57c513) => {\r\n                        _0x57c513 >>>= 0x0;\r\n                        const _0xe5ad3d = TextEncoderUnicode.encode(\r\n                            String(getValueFromMemory(_0x57c513 + 0x8)),\r\n                        );\r\n                        setValueInMemory(_0x57c513 + 0x10, _0xe5ad3d);\r\n                        setMemoryValue(_0x57c513 + 0x18, _0xe5ad3d.length);\r\n                    },\r\n                    \"syscall/js.valueLoadString\": (_0xd20694) => {\r\n                        const _0x1bcf7e = getValueFromMemory(0x8 + (_0xd20694 >>>= 0x0));\r\n                        getByteArrayFromMemory(_0xd20694 + 0x10).set(_0x1bcf7e);\r\n                    },\r\n                    \"syscall/js.valueInstanceOf\": (_0x515e20) => {\r\n                        this.mem.setUint8(\r\n                            0x18 + (_0x515e20 >>>= 0x0),\r\n                            getValueFromMemory(_0x515e20 + 0x8) instanceof\r\n                                getValueFromMemory(_0x515e20 + 0x10)\r\n                                ? 0x1\r\n                                : 0x0,\r\n                        );\r\n                    },\r\n                    \"syscall/js.copyBytesToGo\": (_0x3b040d) => {\r\n                        const _0xcf50d7 = getByteArrayFromMemory(\r\n                            0x8 + (_0x3b040d >>>= 0x0),\r\n                        );\r\n                        const _0x502788 = getValueFromMemory(_0x3b040d + 0x20);\r\n                        if (\r\n                            !(\r\n                                _0x502788 instanceof Uint8Array ||\r\n                                _0x502788 instanceof Uint8ClampedArray\r\n                            )\r\n                        ) {\r\n                            return void this.mem.setUint8(_0x3b040d + 0x30, 0x0);\r\n                        }\r\n                        const _0x347884 = _0x502788.subarray(0x0, _0xcf50d7.length);\r\n                        _0xcf50d7.set(_0x347884);\r\n                        setMemoryValue(_0x3b040d + 0x28, _0x347884.length);\r\n                        this.mem.setUint8(_0x3b040d + 0x30, 0x1);\r\n                    },\r\n                    \"syscall/js.copyBytesToJS\": (_0x2c7dbd) => {\r\n                        const _0x3e840b = getValueFromMemory(0x8 + (_0x2c7dbd >>>= 0x0));\r\n                        const _0x47be1d = getByteArrayFromMemory(_0x2c7dbd + 0x10);\r\n                        if (\r\n                            !(\r\n                                _0x3e840b instanceof Uint8Array ||\r\n                                _0x3e840b instanceof Uint8ClampedArray\r\n                            )\r\n                        ) {\r\n                            return void this.mem.setUint8(_0x2c7dbd + 0x30, 0x0);\r\n                        }\r\n                        const _0x2d9d42 = _0x47be1d.subarray(0x0, _0x3e840b.length);\r\n                        _0x3e840b.set(_0x2d9d42);\r\n                        setMemoryValue(_0x2c7dbd + 0x28, _0x2d9d42.length);\r\n                        this.mem.setUint8(_0x2c7dbd + 0x30, 0x1);\r\n                    },\r\n                    debug: (_0x5560e3) => {\r\n                        console.log(_0x5560e3);\r\n                    },\r\n                },\r\n            };\r\n        }\r\n        run(_0x3a3ab2) {\r\n            return processAsync(this, null, function* () {\r\n                if (!(_0x3a3ab2 instanceof WebAssembly.Instance)) {\r\n                    throw new Error(\"Go.run: WebAssembly.Instance expected\");\r\n                }\r\n                this._inst = _0x3a3ab2;\r\n                this.mem = new DataView(this._inst.exports.mem.buffer);\r\n                this._values = [NaN, 0x0, null, true, false, globalThis, this];\r\n                this._goRefCounts = new Array(this._values.length).fill(Infinity);\r\n                this._ids = new Map([\r\n                    [0x0, 0x1],\r\n                    [null, 0x2],\r\n                    [true, 0x3],\r\n                    [false, 0x4],\r\n                    [globalThis, 0x5],\r\n                    [this, 0x6],\r\n                ]);\r\n                this._idPool = [];\r\n                this.exited = false;\r\n                let _0x5c27d6 = 0x1000;\r\n                const _0x17ab00 = (_0x592ac2) => {\r\n                    const _0x42047b = _0x5c27d6;\r\n                    const _0x169394 = TextEncoderUnicode.encode(_0x592ac2 + \"\\0\");\r\n                    new Uint8Array(this.mem.buffer, _0x5c27d6, _0x169394.length).set(\r\n                        _0x169394,\r\n                    );\r\n                    _0x5c27d6 += _0x169394.length;\r\n                    if (_0x5c27d6 % 0x8 != 0x0) {\r\n                        _0x5c27d6 += 0x8 - (_0x5c27d6 % 0x8);\r\n                    }\r\n                    return _0x42047b;\r\n                };\r\n                const _0x33ce5b = this.argv.length;\r\n                const _0x1d93e4 = [];\r\n                this.argv.forEach((_0x2b450c) => {\r\n                    _0x1d93e4.push(_0x17ab00(_0x2b450c));\r\n                });\r\n                _0x1d93e4.push(0x0);\r\n                Object.keys(this.env)\r\n                    .sort()\r\n                    .forEach((_0x5793a5) => {\r\n                        _0x1d93e4.push(_0x17ab00(_0x5793a5 + \"=\" + this.env[_0x5793a5]));\r\n                    });\r\n                _0x1d93e4.push(0x0);\r\n                const _0x1563af = _0x5c27d6;\r\n                _0x1d93e4.forEach((_0x2954fa) => {\r\n                    this.mem.setUint32(_0x5c27d6, _0x2954fa, true);\r\n                    this.mem.setUint32(_0x5c27d6 + 0x4, 0x0, true);\r\n                    _0x5c27d6 += 0x8;\r\n                });\r\n                if (_0x5c27d6 >= 0x3000) {\r\n                    throw new Error(\r\n                        \"total length of command line and environment variables exceeds limit\",\r\n                    );\r\n                }\r\n                this._inst.exports.run(_0x33ce5b, _0x1563af);\r\n                if (this.exited) {\r\n                    this._resolveExitPromise();\r\n                }\r\n                yield this._exitPromise;\r\n            });\r\n        }\r\n        _resume() {\r\n            if (this.exited) {\r\n                throw new Error(\"Go program has already exited\");\r\n            }\r\n            this._inst.exports.resume();\r\n            if (this.exited) {\r\n                this._resolveExitPromise();\r\n            }\r\n        }\r\n        _makeFuncWrapper(id) {\r\n            const this_ = this;\r\n            return function() {\r\n                const event = {\r\n                    id,\r\n                    this: this,\r\n                    args: arguments,\r\n                };\r\n                this_._pendingEvent = event;\r\n                this_._resume();\r\n                return event.result;\r\n            };\r\n        }\r\n    };\r\n})();\r\n\r\nexport default function(wasmBytes: Buffer, requestData: any, args1: string): Promise<string> {\r\n    return processAsync(this, null, function* () {\r\n        const go = new Go();\r\n        const instance = (yield WebAssembly.instantiate(wasmBytes, go.importObject))\r\n            .instance;\r\n        go.run(instance);\r\n        return globalThis.bder(JSON.stringify(requestData), args1);\r\n    });\r\n}"],"mappings":"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","names":["import_moment","moment","replaceColor","Jimp","balanceData","moment"]}