{"version":3,"sources":["../src/index.ts","../src/MB.ts","../src/utils/Global.ts","../src/utils/LoadWasm.ts","../src/utils/OCRModel.ts","../src/utils/Tesseract.ts","../src/utils/Wasm.ts"],"sourcesContent":["/*\n * MIT License\n *\n * Copyright (c) 2024 CookieGMVN and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport MB from \"./MB\";\n\nexport { MB };","/*\n * MIT License\n *\n * Copyright (c) 2024 CookieGMVN and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { createHash } from \"node:crypto\";\n\nimport moment from \"moment\";\nimport { Client } from \"undici\";\n\nimport { BalanceData, BalanceList, LoginResponseData, TransactionInfo } from \"./typings/MBApi\";\nimport { CaptchaResponse } from \"./typings/MBLogin\";\nimport { defaultHeaders, FPR, generateDeviceId, getTimeNow } from \"./utils/Global\";\nimport wasmEnc from \"./utils/LoadWasm\";\nimport OCRModel from \"./utils/OCRModel\";\nimport TesseractUtils from \"./utils/Tesseract\";\nimport WasmUtils from \"./utils/Wasm\";\n\n/**\n * Main client class for MB Bank API integration.\n * Provides functionality for authentication, account balance queries, and transaction history.\n *\n * @example\n * ```typescript\n * // Initialize the MB client\n * const mb = new MB({\n *   username: '0123456789',   // Your MB Bank phone number\n *   password: 'your_password' // Your MB Bank password\n * });\n *\n * // Login and get account balance\n * async function checkBalance() {\n *   await mb.login();\n *   const balance = await mb.getBalance();\n *   console.log('Total balance:', balance.totalBalance);\n *   console.log('Accounts:', balance.balances);\n * }\n *\n * checkBalance().catch(console.error);\n * ```\n */\nexport default class MB {\n    /**\n     * MB Bank account username (usually phone number).\n     * @readonly\n     * @type {string}\n     */\n    public readonly username: string;\n\n    /**\n     * MB Bank account password.\n     * @readonly\n     * @type {string}\n     */\n    public readonly password: string;\n\n    /**\n     * Session identifier returned by MB Bank's API after successful authentication.\n     * Used to validate subsequent requests.\n     * @type {string|null|undefined}\n     */\n    public sessionId: string | null | undefined;\n\n    /**\n     * Device identifier used for authentication with MB Bank API.\n     * This is automatically generated for each session.\n     * @type {string}\n     */\n    public deviceId: string = generateDeviceId();\n\n    /**\n     * HTTP client for making requests to MB Bank's API.\n     * @type {Client}\n     */\n    public client = new Client(\"https://online.mbbank.com.vn\");\n\n    /**\n     * WASM binary data downloaded from MB Bank.\n     * Used for request encryption.\n     * @private\n     * @type {Buffer}\n     */\n    private wasmData!: Buffer;\n\n    /**\n     * Custom OCR function for captcha recognition.\n     * Allows implementing your own captcha recognition logic.\n     *\n     * @private\n     * @type {Function|undefined}\n     * @param {Buffer} image - The captcha image buffer to be recognized\n     * @returns {Promise<string>} Recognized text from the captcha\n     *\n     * @example\n     * ```typescript\n     * const mb = new MB({\n     *   username: '0123456789',\n     *   password: 'your_password',\n     *   preferredOCRMethod: 'custom',\n     *   customOCRFunction: async (imageBuffer) => {\n     *     // Your custom OCR logic here\n     *     // For example, using a third-party OCR service:\n     *     const result = await someOCRService.recognize(imageBuffer);\n     *     return result.text;\n     *   }\n     * });\n     * ```\n     */\n    private customOCRFunction?: (image: Buffer) => Promise<string>;\n\n    /**\n     * The OCR method to use for captcha recognition.\n     * - \"default\": Uses the pre-trained OCR model (recommended)\n     * - \"tesseract\": Uses Tesseract OCR engine\n     * - \"custom\": Uses the custom OCR function provided\n     *\n     * @private\n     * @type {\"default\"|\"tesseract\"|\"custom\"}\n     * @default \"default\"\n     */\n    private preferredOCRMethod: \"default\" | \"tesseract\" | \"custom\" = \"default\";\n\n    /**\n     * Whether to save the WASM file to disk.\n     * Useful for debugging or caching purposes.\n     *\n     * @private\n     * @type {boolean}\n     * @default false\n     */\n    private saveWasm: boolean = false;\n\n    /**\n     * Creates a new MB client instance.\n     *\n     * @param {Object} data - Configuration options\n     * @param {string} data.username - MB Bank login username (usually your registered phone number)\n     * @param {string} data.password - MB Bank login password\n     * @param {\"default\"|\"tesseract\"|\"custom\"} [data.preferredOCRMethod=\"default\"] - OCR method for captcha recognition\n     * @param {Function} [data.customOCRFunction] - Custom OCR function (required if preferredOCRMethod is \"custom\")\n     * @param {boolean} [data.saveWasm=false] - Whether to save the WASM file to disk\n     *\n     * @throws {Error} If username or password is not provided\n     *\n     * @example\n     * ```typescript\n     * // Basic usage with default OCR\n     * const mbClient = new MB({\n     *   username: '0123456789',\n     *   password: 'your_password'\n     * });\n     *\n     * // Using Tesseract OCR\n     * const mbWithTesseract = new MB({\n     *   username: '0123456789',\n     *   password: 'your_password',\n     *   preferredOCRMethod: 'tesseract'\n     * });\n     *\n     * // Using custom OCR function\n     * const mbWithCustomOCR = new MB({\n     *   username: '0123456789',\n     *   password: 'your_password',\n     *   preferredOCRMethod: 'custom',\n     *   customOCRFunction: async (image) => {\n     *     // Your custom captcha recognition logic\n     *     return recognizedText;\n     *   }\n     * });\n     * ```\n     */\n    public constructor(data: {\n        username: string,\n        password: string,\n        preferredOCRMethod?: \"default\" | \"tesseract\" | \"custom\",\n        customOCRFunction?: (image: Buffer) => Promise<string>,\n        saveWasm?: boolean\n    }) {\n        if (!data.username || !data.password) throw new Error(\"You must define at least a MB account to use with this library!\");\n\n        this.username = data.username;\n        this.password = data.password;\n\n        if (data.preferredOCRMethod) this.preferredOCRMethod = data.preferredOCRMethod;\n        if (data.customOCRFunction) this.customOCRFunction = data.customOCRFunction;\n        if (data.saveWasm) this.saveWasm = data.saveWasm;\n    }\n\n    /**\n     * Processes captcha image according to the configured OCR method.\n     *\n     * @private\n     * @param {Buffer} image - Captcha image buffer\n     * @returns {Promise<string|null>} Recognized captcha text or null if recognition failed\n     */\n    private async recognizeCaptcha(image: Buffer) {\n        switch (this.preferredOCRMethod) {\n            case \"default\":\n                // eslint-disable-next-line no-case-declarations\n                const model = new OCRModel();\n                await model.loadModel();\n\n                // eslint-disable-next-line no-case-declarations\n                const modelPredictedCaptcha = await model.predict(image);\n\n                if (modelPredictedCaptcha.length !== 6) return null;\n                return modelPredictedCaptcha;\n            case \"tesseract\":\n                return await TesseractUtils.recognizeText(image);\n            case \"custom\":\n                if (!this.customOCRFunction) return null;\n\n                // eslint-disable-next-line no-case-declarations\n                const customPredictedCaptcha = await this.customOCRFunction(image);\n\n                if (customPredictedCaptcha.length !== 6) return null;\n                return customPredictedCaptcha;\n        }\n    }\n\n    /**\n     * Authenticates with MB Bank API by solving captcha and sending login credentials.\n     * Sets the session ID upon successful login.\n     *\n     * @returns {Promise<LoginResponseData>} Login response from the API\n     * @throws {Error} If login fails with specific error code and message\n     *\n     * @example\n     * ```typescript\n     * const mb = new MB({\n     *   username: '0123456789',\n     *   password: 'your_password'\n     * });\n     *\n     * try {\n     *   const loginResponse = await mb.login();\n     *   console.log('Login successful!');\n     *   console.log('Session ID:', mb.sessionId);\n     * } catch (error) {\n     *   console.error('Login failed:', error.message);\n     * }\n     * ```\n     */\n    public async login(): Promise<LoginResponseData> {\n        // Request ID/Ref ID for MB\n        const rId = getTimeNow();\n\n        const headers = defaultHeaders as any;\n        headers[\"X-Request-Id\"] = rId;\n        headers[\"Deviceid\"] = this.deviceId;\n        headers[\"Refno\"] = rId;\n\n        const captchaReq = await this.client.request({\n            method: \"POST\",\n            path: \"/api/retail-web-internetbankingms/getCaptchaImage\",\n            headers,\n            body: JSON.stringify({\n                \"sessionId\": \"\",\n                \"refNo\": rId,\n                \"deviceIdCommon\": this.deviceId,\n            }),\n        });\n\n        const captchaRes: CaptchaResponse = await captchaReq.body.json() as CaptchaResponse;\n        const captchaBuffer = Buffer.from(captchaRes.imageString, \"base64\");\n\n        const captchaContent = await this.recognizeCaptcha(captchaBuffer);\n\n        if (captchaContent === null) return this.login();\n\n        // wasm\n        if (!this.wasmData) {\n            this.wasmData = await WasmUtils.loadWasm(this.saveWasm ? \"main.wasm\" : undefined);\n        }\n\n        // Create Data\n        const requestData = {\n            userId: this.username,\n            password: createHash(\"md5\").update(this.password).digest(\"hex\"),\n            captcha: captchaContent,\n            ibAuthen2faString: FPR,\n            sessionId: null,\n            refNo: getTimeNow(),\n            deviceIdCommon: this.deviceId,\n        };\n\n        const loginReq = await this.client.request({\n            method: \"POST\",\n            path: \"/api/retail_web/internetbanking/v2.0/doLogin\",\n            headers: defaultHeaders,\n            body: JSON.stringify({\n                dataEnc: await wasmEnc(this.wasmData, requestData, \"0\"),\n            }),\n        });\n\n        const loginRes = await loginReq.body.json() as any;\n\n        if (!loginRes.result) {\n            throw new Error(\"Login failed: Unknown data\");\n        }\n\n        if (loginRes.result.ok) {\n            this.sessionId = loginRes.sessionId;\n            return loginRes;\n        }\n        else if (loginRes.result.responseCode === \"GW283\") {\n            // Again...\n            return this.login();\n        }\n        else {\n            const e = new Error(\"Login failed: (\" + loginRes.result.responseCode + \"): \" + loginRes.result.message) as any;\n            e.code = loginRes.result.responseCode;\n            throw e;\n        }\n    }\n\n    /**\n     * Generates a reference ID required by MB Bank API.\n     * The format is \"{username}-{timestamp}\".\n     *\n     * @private\n     * @returns {string} Reference ID for API requests\n     */\n    private getRefNo() {\n        return `${this.username}-${getTimeNow()}`;\n    }\n\n    /**\n     * Makes an authenticated request to MB Bank API.\n     * Handles session expiration by automatically re-logging in.\n     *\n     * @private\n     * @param {Object} data - Request parameters\n     * @param {string} data.path - API endpoint path\n     * @param {Object} [data.json] - Request body data\n     * @param {Object} [data.headers] - Additional request headers\n     * @returns {Promise<any>} API response\n     * @throws {Error} If the request fails with error code and message\n     */\n    private async mbRequest(data: { path: string, json?: object, headers?: object }) : Promise<any> {\n        if (!this.sessionId) {\n            await this.login();\n        }\n\n        const rId = this.getRefNo();\n\n        const headers = defaultHeaders as any;\n        headers[\"X-Request-Id\"] = rId;\n        headers[\"Deviceid\"] = this.deviceId,\n        headers[\"Refno\"] = rId;\n\n        const defaultBody = {\n            \"sessionId\": this.sessionId,\n            \"refNo\": rId,\n            \"deviceIdCommon\": this.deviceId,\n        };\n        const body = Object.assign(defaultBody, data.json);\n\n        const httpReq = await this.client.request({\n            method: \"POST\",\n            path: data.path,\n            headers,\n            body: JSON.stringify(body),\n        });\n\n        const httpRes = await httpReq.body.json() as any;\n\n        if (!httpRes || !httpRes.result) {\n            return false;\n        }\n        else if (httpRes.result.ok == true) return httpRes;\n        else if (httpRes.result.responseCode === \"GW200\") {\n            await this.login();\n            return this.mbRequest(data);\n        }\n        else {\n            throw new Error(\"Request failed (\" + httpRes.result.responseCode + \"): \" + httpRes.result.message);\n        }\n    }\n\n    /**\n     * Retrieves account balance information for all accounts.\n     *\n     * @returns {Promise<BalanceList|undefined>} Account balance data or undefined if request fails\n     *\n     * @example\n     * ```typescript\n     * const mb = new MB({\n     *   username: '0123456789',\n     *   password: 'your_password'\n     * });\n     *\n     * async function getAccountInfo() {\n     *   await mb.login();\n     *   const balanceInfo = await mb.getBalance();\n     *\n     *   if (balanceInfo) {\n     *     console.log(`Total balance: ${balanceInfo.totalBalance} ${balanceInfo.currencyEquivalent}`);\n     *\n     *     // Display each account's details\n     *     balanceInfo.balances.forEach(account => {\n     *       console.log(`Account: ${account.name} (${account.number})`);\n     *       console.log(`Balance: ${account.balance} ${account.currency}`);\n     *       console.log('---');\n     *     });\n     *   }\n     * }\n     *\n     * getAccountInfo().catch(console.error);\n     * ```\n     */\n    public async getBalance(): Promise<BalanceList | undefined> {\n        const balanceData = await this.mbRequest({ path: \"/api/retail-web-accountms/getBalance\" });\n\n        if (!balanceData) return;\n\n        const balance: BalanceList = {\n            totalBalance: balanceData.totalBalanceEquivalent,\n            currencyEquivalent: balanceData.currencyEquivalent,\n            balances: [],\n        };\n\n        balanceData.acct_list.forEach((acctInfo: unknown) => {\n            const acct = acctInfo as any;\n\n            const balanceData: BalanceData = {\n                number: acct.acctNo,\n                name: acct.acctNm,\n                currency: acct.ccyCd,\n                balance: acct.currentBalance,\n            };\n\n            balance.balances?.push(balanceData);\n        });\n\n        balanceData.internationalAcctList.forEach((acctInfo: unknown) => {\n            const acct = acctInfo as any;\n\n            const balanceData: BalanceData = {\n                number: acct.acctNo,\n                name: acct.acctNm,\n                currency: acct.ccyCd,\n                balance: acct.currentBalance,\n            };\n\n            balance.balances?.push(balanceData);\n        });\n\n        return balance;\n    }\n\n    /**\n     * Retrieves transaction history for a specific account within a date range.\n     *\n     * @param {Object} data - Request parameters\n     * @param {string} data.accountNumber - MB Bank account number to query\n     * @param {string} data.fromDate - Start date in format \"DD/MM/YYYY\" or \"D/M/YYYY\"\n     * @param {string} data.toDate - End date in format \"DD/MM/YYYY\" or \"D/M/YYYY\"\n     * @returns {Promise<TransactionInfo[]|undefined>} Array of transaction details or undefined if request fails\n     * @throws {Error} If date range exceeds 90 days or date format is invalid\n     *\n     * @example\n     * ```typescript\n     * const mb = new MB({\n     *   username: '0123456789',\n     *   password: 'your_password'\n     * });\n     *\n     * async function getLastMonthTransactions() {\n     *   await mb.login();\n     *\n     *   // Get account first\n     *   const balanceInfo = await mb.getBalance();\n     *   if (!balanceInfo?.balances?.length) {\n     *     console.log('No accounts found');\n     *     return;\n     *   }\n     *\n     *   const accountNumber = balanceInfo.balances[0].number;\n     *\n     *   // Get transactions for the last 30 days\n     *   const today = new Date();\n     *   const lastMonth = new Date();\n     *   lastMonth.setDate(today.getDate() - 30);\n     *\n     *   const fromDate = `${lastMonth.getDate()}/${lastMonth.getMonth() + 1}/${lastMonth.getFullYear()}`;\n     *   const toDate = `${today.getDate()}/${today.getMonth() + 1}/${today.getFullYear()}`;\n     *\n     *   const transactions = await mb.getTransactionsHistory({\n     *     accountNumber,\n     *     fromDate,\n     *     toDate\n     *   });\n     *\n     *   if (transactions) {\n     *     console.log(`Found ${transactions.length} transactions`);\n     *\n     *     transactions.forEach(tx => {\n     *       const amount = tx.creditAmount || tx.debitAmount;\n     *       const type = tx.creditAmount ? 'CREDIT' : 'DEBIT';\n     *\n     *       console.log(`${tx.transactionDate} | ${type} | ${amount} ${tx.transactionCurrency}`);\n     *       console.log(`Description: ${tx.transactionDesc}`);\n     *       if (tx.toAccountName) {\n     *         console.log(`To: ${tx.toAccountName} (${tx.toAccountNumber}) at ${tx.toBank}`);\n     *       }\n     *       console.log('---');\n     *     });\n     *   }\n     * }\n     *\n     * getLastMonthTransactions().catch(console.error);\n     * ```\n     */\n    public async getTransactionsHistory(data: { accountNumber: string, fromDate: string, toDate: string }): Promise<TransactionInfo[] | undefined> {\n        if (moment().day() - moment(data.fromDate, \"D/M/YYYY\").day() > 90 || moment().day() - moment(data.fromDate, \"D/M/YYYY\").day() > 90) throw new Error(\"Date formatting error: Max transaction history must be shorter than 90 days!\");\n        if (moment(data.fromDate, \"DD/MM/YYYY\").day() - moment(data.toDate, \"D/M/YYYY\").day() > 90) throw new Error(\"Date formatting error: Max transaction history must be shorter than 90 days!\");\n\n        const body = {\n            \"accountNo\": data.accountNumber,\n            \"fromDate\": moment(data.fromDate, \"D/M/YYYY\").format(\"DD/MM/YYYY\"),\n            \"toDate\": moment(data.toDate, \"D/M/YYYY\").format(\"DD/MM/YYYY\"),\n        };\n\n        const historyData = await this.mbRequest({ path: \"/api/retail-transactionms/transactionms/get-account-transaction-history\", json: body });\n\n        if (!historyData || !historyData.transactionHistoryList) return;\n\n        const transactionHistories: TransactionInfo[] = [];\n\n        historyData.transactionHistoryList.forEach((transactionRaw: unknown) => {\n\n            const transaction = transactionRaw as any;\n\n            const transactionData: TransactionInfo = {\n                postDate: transaction.postingDate,\n                transactionDate: transaction.transactionDate,\n                accountNumber: transaction.accountNo,\n                creditAmount: transaction.creditAmount,\n                debitAmount: transaction.debitAmount,\n                transactionCurrency: transaction.currency,\n                transactionDesc: transaction.description,\n                balanceAvailable: transaction.availableBalance,\n                refNo: transaction.refNo,\n                toAccountName: transaction.benAccountName,\n                toBank: transaction.bankName,\n                toAccountNumber: transaction.benAccountName,\n                type: transaction.transactionType,\n            };\n\n            transactionHistories.push(transactionData);\n        });\n\n        return transactionHistories;\n    }\n}","/*\n * MIT License\n *\n * Copyright (c) 2024 CookieGMVN and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Jimp from \"jimp\";\nimport moment from \"moment\";\n\n/**\n * Gets the current time in a specific format\n * @returns {string} The current time in format YYYYMMDDHHmmss + milliseconds (truncated)\n */\nexport function getTimeNow(): string {\n    return moment().format(\"YYYYMMDDHHmmss\" + moment().millisecond().toString().slice(0, -1));\n}\n\n/**\n * Generates a device ID for authentication purposes\n * @returns {string} A device ID string in the format \"s1rmi184-mbib-0000-0000-\" + timestamp\n */\nexport function generateDeviceId() {\n    return \"s1rmi184-mbib-0000-0000-\" + getTimeNow();\n}\n\n/**\n * Default headers for API requests\n * @type {Object}\n */\nexport const defaultHeaders = {\n    'Cache-Control': 'max-age=0',\n    'Accept': 'application/json, text/plain, */*',\n    'Authorization': 'Basic RU1CUkVUQUlMV0VCOlNEMjM0ZGZnMzQlI0BGR0AzNHNmc2RmNDU4NDNm',\n    'User-Agent': \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36\",\n    \"Origin\": \"https://online.mbbank.com.vn\",\n    \"Referer\": \"https://online.mbbank.com.vn/pl/login?returnUrl=%2F\",\n    \"Content-Type\": \"application/json; charset=UTF-8\",\n    app: \"MB_WEB\",\n    \"elastic-apm-traceparent\": \"00-55b950e3fcabc785fa6db4d7deb5ef73-8dbd60b04eda2f34-01\",\n    \"Sec-Ch-Ua\": '\"Not.A/Brand\";v=\"8\", \"Chromium\";v=\"134\", \"Google Chrome\";v=\"134\"',\n    \"Sec-Ch-Ua-Mobile\": \"?0\",\n    \"Sec-Ch-Ua-Platform\": '\"Windows\"',\n    \"Sec-Fetch-Dest\": \"empty\",\n    \"Sec-Fetch-Mode\": \"cors\",\n    \"Sec-Fetch-Site\": \"same-origin\",\n};\n\n/**\n * Default configuration for Tesseract OCR\n * @type {Object}\n */\nexport const defaultTesseractConfig = {\n    lang: \"eng\",\n    oem: 1,\n    psm: 12,\n};\n\n/**\n * Fingerprint value for authentication\n * @type {string}\n */\nexport const FPR = \"c7a1beebb9400375bb187daa33de9659\";\n\n/**\n * Replaces a target color in an image with a different color\n * @param {Object} options - The options object\n * @param {Buffer} options.image - The image buffer to process\n * @param {string} options.target - The target color in hex format (with or without # prefix)\n * @param {string} options.replace - The replacement color in hex format (with or without # prefix)\n * @param {number} [options.tolerance=0] - The color matching tolerance (0-100)\n * @returns {Promise<Buffer>} A Promise that resolves to the modified image buffer\n * @throws {Error} If image processing fails\n */\nexport async function replaceColor({\n    image,\n    target,\n    replace,\n    tolerance = 0,\n}: {\n    image: Buffer,\n    target: string,\n    replace: string,\n    tolerance?: number\n}): Promise<Buffer> {\n    try {\n        // Load the image from buffer\n        const jimpImage = await Jimp.read(image);\n\n        // Parse hex colors to RGBA values\n        // Handle hex colors with or without # prefix\n        const targetHex = target.startsWith('#') ? target.substring(1) : target;\n        const replaceHex = replace.startsWith('#') ? replace.substring(1) : replace;\n\n        // Convert hex to RGB integers\n        const targetR = parseInt(targetHex.substring(0, 2), 16);\n        const targetG = parseInt(targetHex.substring(2, 4), 16);\n        const targetB = parseInt(targetHex.substring(4, 6), 16);\n\n        const replaceR = parseInt(replaceHex.substring(0, 2), 16);\n        const replaceG = parseInt(replaceHex.substring(2, 4), 16);\n        const replaceB = parseInt(replaceHex.substring(4, 6), 16);\n\n        // Calculate tolerance threshold (normalize to 0-255 scale for each channel)\n        const maxDiff = 255 * Math.min(tolerance / 100, 1);\n\n        // Process each pixel\n        jimpImage.scan(0, 0, jimpImage.getWidth(), jimpImage.getHeight(), function(x, y, idx) {\n            // Get current pixel RGB values\n            const r = this.bitmap.data[idx + 0];\n            const g = this.bitmap.data[idx + 1];\n            const b = this.bitmap.data[idx + 2];\n            // Alpha is at idx + 3\n\n            // Calculate color difference using Euclidean distance\n            const colorDiff = Math.sqrt(\n                Math.pow(r - targetR, 2) +\n                Math.pow(g - targetG, 2) +\n                Math.pow(b - targetB, 2),\n            );\n\n            // Replace the color if within tolerance\n            if (colorDiff <= maxDiff) {\n                this.bitmap.data[idx + 0] = replaceR;\n                this.bitmap.data[idx + 1] = replaceG;\n                this.bitmap.data[idx + 2] = replaceB;\n                // Alpha channel is preserved\n            }\n        });\n\n        // Return the modified image as a buffer\n        return await jimpImage.getBufferAsync(Jimp.MIME_PNG);\n    } catch (error) {\n        console.error('Error in replaceColor:', error);\n        throw new Error(`Failed to process image: ${(error as Error).message}`);\n    }\n}\n\n/**\n * Cuts a border of specified width from all sides of an image\n * @param {Object} options - The options object\n * @param {Buffer} options.image - The image buffer to process\n * @param {number} [options.borderWidth=5] - The width of the border to remove in pixels\n * @returns {Promise<Buffer>} A Promise that resolves to the modified image buffer\n * @throws {Error} If the image is too small or processing fails\n */\nexport async function cutBorder({\n    image,\n    borderWidth = 5,\n}: {\n    image: Buffer,\n    borderWidth?: number\n}): Promise<Buffer> {\n    try {\n        // Load the image from buffer\n        const jimpImage = await Jimp.read(image);\n\n        // Get the original dimensions\n        const originalWidth = jimpImage.getWidth();\n        const originalHeight = jimpImage.getHeight();\n\n        // Check if image is large enough to cut the border\n        if (originalWidth <= 2 * borderWidth || originalHeight <= 2 * borderWidth) {\n            throw new Error('Image is too small to cut the specified border width');\n        }\n\n        // Calculate new dimensions\n        const newWidth = originalWidth - (2 * borderWidth);\n        const newHeight = originalHeight - (2 * borderWidth);\n\n        // Crop the image (removing the border from all sides)\n        const croppedImage = jimpImage.crop(\n            borderWidth,\n            borderWidth,\n            newWidth,\n            newHeight,\n        );\n\n        // Return the modified image as a buffer\n        return await croppedImage.getBufferAsync(Jimp.MIME_PNG);\n    } catch (error) {\n        console.error('Error in cutBorder:', error);\n        throw new Error(`Failed to process image: ${(error as Error).message}`);\n    }\n}","/*\n * MIT License\n *\n * Copyright (c) 2024 CookieGMVN and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint-disable */\n// @ts-nocheck\n\nconst window = {\n    globalThis,\n    document: {\n        welovemb: true\n    }\n};\n\nglobalThis.window = window;\nglobalThis.location = new URL(\"https://online.mbbank.com.vn/pl/login\");\n\nconst processAsync = (param1, param2, generatorFunction) =>\n    new Promise((resolve, reject) => {\n        var handleResult = (result) => {\n            try {\n                processStep(generatorFunction.next(result));\n            } catch (error) {\n                reject(error);\n            }\n        },\n            handleError = (error) => {\n                try {\n                    processStep(generatorFunction.throw(error));\n                } catch (err) {\n                    reject(err);\n                }\n            },\n            processStep = (step) =>\n                step.done\n                    ? resolve(step.value)\n                    : Promise.resolve(step.value).then(handleResult, handleError);\n        processStep(\n            (generatorFunction = generatorFunction.apply(param1, param2)).next(),\n        );\n    });\n\n(() => {\n    const ErrENOSYS = () => {\n        const err = new Error(\"not implemented\");\n        err.code = \"ENOSYS\";\n        return err;\n    };\n    if (!globalThis.fs) {\n        let data = \"\";\n        globalThis.fs = {\n            constants: {\n                O_WRONLY: -1,\n                O_RDWR: -1,\n                O_CREAT: -1,\n                O_TRUNC: -1,\n                O_APPEND: -1,\n                O_EXCL: -1,\n            },\n            writeSync(fd, buffer) {\n                data += TextDecoderUnicode.decode(buffer);\n                const indexEOL = data.lastIndexOf(\"\\n\");\n                if (indexEOL != -1) {\n                    console.log(data.substring(0x0, indexEOL));\n                    data = data.substring(indexEOL + 0x1);\n                }\n                return buffer.length;\n            },\n            write(fd, buffer, offset, length, position, callback) {\n                if (offset === 0 && length === buffer.length && position === null) {\n                    callback(null, this.writeSync(fd, buffer));\n                } else {\n                    callback(ErrENOSYS());\n                }\n            },\n            fsync(fd, callback) {\n                callback(null);\n            },\n        };\n    }\n    if (!globalThis.process) {\n        globalThis.process = {\n            getuid: () => -1,\n            getgid: () => -1,\n            geteuid: () => -1,\n            getegid: () => -1,\n            pid: -1,\n            ppid: -1,\n        };\n    }\n    if (!globalThis.crypto) {\n        throw new Error(\n            \"globalThis.crypto is not available, polyfill required (crypto.getRandomValues only)\",\n        );\n    }\n    if (!globalThis.performance) {\n        throw new Error(\n            \"globalThis.performance is not available, polyfill required (performance.now only)\",\n        );\n    }\n    if (!globalThis.TextEncoder) {\n        throw new Error(\n            \"globalThis.TextEncoder is not available, polyfill required\",\n        );\n    }\n    if (!globalThis.TextDecoder) {\n        throw new Error(\n            \"globalThis.TextDecoder is not available, polyfill required\",\n        );\n    }\n\n    const TextEncoderUnicode = new TextEncoder(\"utf-8\");\n    const TextDecoderUnicode = new TextDecoder(\"utf-8\");\n\n    globalThis.Go = class {\n        constructor() {\n            this.argv = [\"js\"];\n            this.env = {};\n            this.exit = (exitCode) => {\n                if (exitCode !== 0) {\n                    console.warn(\"exit code:\", exitCode);\n                }\n            };\n            this._exitPromise = new Promise((resolve) => {\n                this._resolveExitPromise = resolve;\n            });\n            this._pendingEvent = null;\n            this._scheduledTimeouts = new Map();\n            this._nextCallbackTimeoutID = 1;\n\n            const setMemoryValue = (address, value) => {\n                this.mem.setUint32(address + 0x0, value, true);\n                this.mem.setUint32(\n                    address + 0x4,\n                    Math.floor(value / 0x100000000),\n                    true,\n                );\n            };\n\n            const getValueFromMemory = (address) => {\n                const floatValue = this.mem.getFloat64(address, true);\n                if (floatValue === 0) {\n                    return;\n                }\n                if (!isNaN(floatValue)) {\n                    return floatValue;\n                }\n                const intValue = this.mem.getUint32(address, true);\n                return this._values[intValue];\n            };\n\n            const setValueInMemory = (address, value) => {\n                if (typeof value === \"number\" && value !== 0) {\n                    if (isNaN(value)) {\n                        this.mem.setUint32(address + 0x4, 0x7ff80000, true);\n                        this.mem.setUint32(address, 0x0, true);\n                    } else {\n                        this.mem.setFloat64(address, value, true);\n                    }\n                    return;\n                }\n\n                if (value === undefined) {\n                    this.mem.setFloat64(address, 0x0, true);\n                    return;\n                }\n\n                let id = this._ids.get(value);\n                if (id === undefined) {\n                    id = this._idPool.pop();\n                    if (id === undefined) {\n                        id = this._values.length;\n                    }\n                    this._values[id] = value;\n                    this._goRefCounts[id] = 0;\n                    this._ids.set(value, id);\n                }\n                this._goRefCounts[id]++;\n\n                let typeFlag = 0;\n                switch (typeof value) {\n                    case \"object\":\n                        if (value !== null) {\n                            typeFlag = 1;\n                        }\n                        break;\n                    case \"string\":\n                        typeFlag = 2;\n                        break;\n                    case \"symbol\":\n                        typeFlag = 3;\n                        break;\n                    case \"function\":\n                        typeFlag = 4;\n                }\n\n                this.mem.setUint32(address + 0x4, 0x7ff80000 | typeFlag, true);\n                this.mem.setUint32(address, id, true);\n            };\n\n            const getByteArrayFromMemory = (address) => {\n                const startAddress =\n                    this.mem.getUint32(address + 0x0, true) +\n                    0x100000000 * this.mem.getInt32(address + 0x4, true);\n\n                const length =\n                    this.mem.getUint32(address + 0x8, true) +\n                    0x100000000 * this.mem.getInt32(address + 0xc, true);\n\n                return new Uint8Array(\n                    this._inst.exports.mem.buffer,\n                    startAddress,\n                    length,\n                );\n            };\n\n            const getArrayFromMemory = (address) => {\n                const startAddress =\n                    this.mem.getUint32(address + 0x0, true) +\n                    0x100000000 * this.mem.getInt32(address + 0x4, true);\n\n                const length =\n                    this.mem.getUint32(address + 0x8, true) +\n                    0x100000000 * this.mem.getInt32(address + 0xc, true);\n\n                const array = new Array(length);\n                for (let i = 0; i < length; i++) {\n                    array[i] = getValueFromMemory(startAddress + 0x8 * i);\n                }\n\n                return array;\n            };\n\n            const getStringFromMemory = (address) => {\n                const startAddress =\n                    this.mem.getUint32(address + 0x0, true) +\n                    0x100000000 * this.mem.getInt32(address + 0x4, true);\n\n                const length =\n                    this.mem.getUint32(address + 0x8, true) +\n                    0x100000000 * this.mem.getInt32(address + 0xc, true);\n\n                return TextDecoderUnicode.decode(\n                    new DataView(this._inst.exports.mem.buffer, startAddress, length),\n                );\n            };\n\n            const timeDifference = Date.now() - performance.now();\n\n            this.importObject = {\n                _gotest: {\n                    add: (a, b) => a + b,\n                },\n                gojs: {\n                    \"runtime.wasmExit\": (input) => {\n                        const exitCode = this.mem.getInt32(0x8 + (input >>>= 0x0), true);\n                        this.exited = true;\n                        delete this._inst;\n                        delete this._values;\n                        delete this._goRefCounts;\n                        delete this._ids;\n                        delete this._idPool;\n                        this.exit(exitCode);\n                    },\n                    \"runtime.wasmWrite\": (address) => {\n                        const fileDescriptor =\n                            this.mem.getUint32(0x8 + (address >>>= 0x0) + 0x0, true) +\n                            0x100000000 *\n                            this.mem.getInt32(0x8 + (address >>>= 0x0) + 0x4, true);\n\n                        const dataAddress =\n                            this.mem.getUint32(address + 0x10 + 0x0, true) +\n                            0x100000000 * this.mem.getInt32(address + 0x10 + 0x4, true);\n\n                        const dataLength = this.mem.getInt32(address + 0x18, true);\n\n                        fs.writeSync(\n                            fileDescriptor,\n                            new Uint8Array(\n                                this._inst.exports.mem.buffer,\n                                dataAddress,\n                                dataLength,\n                            ),\n                        );\n                    },\n                    \"runtime.resetMemoryDataView\": (_0x1fc0dd) => {\n                        this.mem = new DataView(this._inst.exports.mem.buffer);\n                    },\n                    \"runtime.nanotime1\": (_0x5843c4) => {\n                        setMemoryValue(\n                            0x8 + (_0x5843c4 >>>= 0x0),\n                            0xf4240 * (timeDifference + performance.now()),\n                        );\n                    },\n                    \"runtime.walltime\": (_0x431dd5) => {\n                        _0x431dd5 >>>= 0x0;\n                        const _0x2d1628 = new Date().getTime();\n                        setMemoryValue(_0x431dd5 + 0x8, _0x2d1628 / 0x3e8);\n                        this.mem.setInt32(\n                            _0x431dd5 + 0x10,\n                            (_0x2d1628 % 0x3e8) * 0xf4240,\n                            true,\n                        );\n                    },\n                    \"runtime.scheduleTimeoutEvent\": (_0x40be90) => {\n                        _0x40be90 >>>= 0x0;\n                        const _0x4d23db = this._nextCallbackTimeoutID;\n                        this._nextCallbackTimeoutID++;\n                        this._scheduledTimeouts.set(\n                            _0x4d23db,\n                            setTimeout(() => {\n                                for (this._resume(); this._scheduledTimeouts.has(_0x4d23db);) {\n                                    console.warn(\"scheduleTimeoutEvent: missed timeout event\");\n                                    this._resume();\n                                }\n                            }, this.mem.getUint32(_0x40be90 + 0x8 + 0x0, true) + 0x100000000 * this.mem.getInt32(_0x40be90 + 0x8 + 0x4, true)),\n                        );\n                        this.mem.setInt32(_0x40be90 + 0x10, _0x4d23db, true);\n                    },\n                    \"runtime.clearTimeoutEvent\": (_0x4d392b) => {\n                        const _0x157834 = this.mem.getInt32(\n                            0x8 + (_0x4d392b >>>= 0x0),\n                            true,\n                        );\n                        clearTimeout(this._scheduledTimeouts.get(_0x157834));\n                        this._scheduledTimeouts[\"delete\"](_0x157834);\n                    },\n                    \"runtime.getRandomData\": (_0xfc09b6) => {\n                        crypto.getRandomValues(\n                            getByteArrayFromMemory(0x8 + (_0xfc09b6 >>>= 0x0)),\n                        );\n                    },\n                    \"syscall/js.finalizeRef\": (_0x5edca4) => {\n                        const _0x57d4fc = this.mem.getUint32(\n                            0x8 + (_0x5edca4 >>>= 0x0),\n                            true,\n                        );\n                        this._goRefCounts[_0x57d4fc]--;\n                        if (this._goRefCounts[_0x57d4fc] === 0x0) {\n                            const _0x372c88 = this._values[_0x57d4fc];\n                            this._values[_0x57d4fc] = null;\n                            this._ids[\"delete\"](_0x372c88);\n                            this._idPool.push(_0x57d4fc);\n                        }\n                    },\n                    \"syscall/js.stringVal\": (_0x11c7ea) => {\n                        setValueInMemory(\n                            0x18 + (_0x11c7ea >>>= 0x0),\n                            getStringFromMemory(_0x11c7ea + 0x8),\n                        );\n                    },\n                    \"syscall/js.valueGet\": (_0x3c119c) => {\n                        _0x3c119c >>>= 0x0;\n                        const _0x57d3f0 = Reflect.get(\n                            getValueFromMemory(_0x3c119c + 0x8),\n                            getStringFromMemory(_0x3c119c + 0x10),\n                        );\n                        _0x3c119c = this._inst.exports.getsp() >>> 0x0;\n                        setValueInMemory(_0x3c119c + 0x20, _0x57d3f0);\n                    },\n                    \"syscall/js.valueSet\": (_0x2df90d) => {\n                        _0x2df90d >>>= 0x0;\n                        Reflect.set(\n                            getValueFromMemory(_0x2df90d + 0x8),\n                            getStringFromMemory(_0x2df90d + 0x10),\n                            getValueFromMemory(_0x2df90d + 0x20),\n                        );\n                    },\n                    \"syscall/js.valueDelete\": (_0x5c6169) => {\n                        _0x5c6169 >>>= 0x0;\n                        Reflect.deleteProperty(\n                            getValueFromMemory(_0x5c6169 + 0x8),\n                            getStringFromMemory(_0x5c6169 + 0x10),\n                        );\n                    },\n                    \"syscall/js.valueIndex\": (_0xd5cf7e) => {\n                        setValueInMemory(\n                            0x18 + (_0xd5cf7e >>>= 0x0),\n                            Reflect.get(\n                                getValueFromMemory(_0xd5cf7e + 0x8),\n                                this.mem.getUint32(_0xd5cf7e + 0x10 + 0x0, true) +\n                                0x100000000 * this.mem.getInt32(_0xd5cf7e + 0x10 + 0x4, true),\n                            ),\n                        );\n                    },\n                    \"syscall/js.valueSetIndex\": (_0x1b938f) => {\n                        _0x1b938f >>>= 0x0;\n                        Reflect.set(\n                            getValueFromMemory(_0x1b938f + 0x8),\n                            this.mem.getUint32(_0x1b938f + 0x10 + 0x0, true) +\n                            0x100000000 * this.mem.getInt32(_0x1b938f + 0x10 + 0x4, true),\n                            getValueFromMemory(_0x1b938f + 0x18),\n                        );\n                    },\n                    \"syscall/js.valueCall\": (_0x38baf6) => {\n                        _0x38baf6 >>>= 0x0;\n                        try {\n                            const _0xb55714 = getValueFromMemory(_0x38baf6 + 0x8);\n                            const _0x4b45ac = Reflect.get(\n                                _0xb55714,\n                                getStringFromMemory(_0x38baf6 + 0x10),\n                            );\n                            const _0x929c90 = getArrayFromMemory(_0x38baf6 + 0x20);\n                            const _0x331ca0 = Reflect.apply(_0x4b45ac, _0xb55714, _0x929c90);\n                            _0x38baf6 = this._inst.exports.getsp() >>> 0x0;\n                            setValueInMemory(_0x38baf6 + 0x38, _0x331ca0);\n                            this.mem.setUint8(_0x38baf6 + 0x40, 0x1);\n                        } catch (_0x3b2cd8) {\n                            _0x38baf6 = this._inst.exports.getsp() >>> 0x0;\n                            setValueInMemory(_0x38baf6 + 0x38, _0x3b2cd8);\n                            this.mem.setUint8(_0x38baf6 + 0x40, 0x0);\n                        }\n                    },\n                    \"syscall/js.valueInvoke\": (_0x19f35b) => {\n                        _0x19f35b >>>= 0x0;\n                        try {\n                            const _0xdd2a3 = getValueFromMemory(_0x19f35b + 0x8);\n                            const _0x330c8f = getArrayFromMemory(_0x19f35b + 0x10);\n                            const _0x49e23c = Reflect.apply(_0xdd2a3, undefined, _0x330c8f);\n                            _0x19f35b = this._inst.exports.getsp() >>> 0x0;\n                            setValueInMemory(_0x19f35b + 0x28, _0x49e23c);\n                            this.mem.setUint8(_0x19f35b + 0x30, 0x1);\n                        } catch (_0x5bd1fc) {\n                            _0x19f35b = this._inst.exports.getsp() >>> 0x0;\n                            setValueInMemory(_0x19f35b + 0x28, _0x5bd1fc);\n                            this.mem.setUint8(_0x19f35b + 0x30, 0x0);\n                        }\n                    },\n                    \"syscall/js.valueNew\": (_0x275c5e) => {\n                        _0x275c5e >>>= 0x0;\n                        try {\n                            const _0x2a547b = getValueFromMemory(_0x275c5e + 0x8);\n                            const _0x3fcde3 = getArrayFromMemory(_0x275c5e + 0x10);\n                            const _0x94eb67 = Reflect.construct(_0x2a547b, _0x3fcde3);\n                            _0x275c5e = this._inst.exports.getsp() >>> 0x0;\n                            setValueInMemory(_0x275c5e + 0x28, _0x94eb67);\n                            this.mem.setUint8(_0x275c5e + 0x30, 0x1);\n                        } catch (_0x5b3614) {\n                            _0x275c5e = this._inst.exports.getsp() >>> 0x0;\n                            setValueInMemory(_0x275c5e + 0x28, _0x5b3614);\n                            this.mem.setUint8(_0x275c5e + 0x30, 0x0);\n                        }\n                    },\n                    \"syscall/js.valueLength\": (_0x2cc204) => {\n                        setMemoryValue(\n                            0x10 + (_0x2cc204 >>>= 0x0),\n                            parseInt(getValueFromMemory(_0x2cc204 + 0x8).length),\n                        );\n                    },\n                    \"syscall/js.valuePrepareString\": (_0x57c513) => {\n                        _0x57c513 >>>= 0x0;\n                        const _0xe5ad3d = TextEncoderUnicode.encode(\n                            String(getValueFromMemory(_0x57c513 + 0x8)),\n                        );\n                        setValueInMemory(_0x57c513 + 0x10, _0xe5ad3d);\n                        setMemoryValue(_0x57c513 + 0x18, _0xe5ad3d.length);\n                    },\n                    \"syscall/js.valueLoadString\": (_0xd20694) => {\n                        const _0x1bcf7e = getValueFromMemory(0x8 + (_0xd20694 >>>= 0x0));\n                        getByteArrayFromMemory(_0xd20694 + 0x10).set(_0x1bcf7e);\n                    },\n                    \"syscall/js.valueInstanceOf\": (_0x515e20) => {\n                        this.mem.setUint8(\n                            0x18 + (_0x515e20 >>>= 0x0),\n                            getValueFromMemory(_0x515e20 + 0x8) instanceof\n                                getValueFromMemory(_0x515e20 + 0x10)\n                                ? 0x1\n                                : 0x0,\n                        );\n                    },\n                    \"syscall/js.copyBytesToGo\": (_0x3b040d) => {\n                        const _0xcf50d7 = getByteArrayFromMemory(\n                            0x8 + (_0x3b040d >>>= 0x0),\n                        );\n                        const _0x502788 = getValueFromMemory(_0x3b040d + 0x20);\n                        if (\n                            !(\n                                _0x502788 instanceof Uint8Array ||\n                                _0x502788 instanceof Uint8ClampedArray\n                            )\n                        ) {\n                            return void this.mem.setUint8(_0x3b040d + 0x30, 0x0);\n                        }\n                        const _0x347884 = _0x502788.subarray(0x0, _0xcf50d7.length);\n                        _0xcf50d7.set(_0x347884);\n                        setMemoryValue(_0x3b040d + 0x28, _0x347884.length);\n                        this.mem.setUint8(_0x3b040d + 0x30, 0x1);\n                    },\n                    \"syscall/js.copyBytesToJS\": (_0x2c7dbd) => {\n                        const _0x3e840b = getValueFromMemory(0x8 + (_0x2c7dbd >>>= 0x0));\n                        const _0x47be1d = getByteArrayFromMemory(_0x2c7dbd + 0x10);\n                        if (\n                            !(\n                                _0x3e840b instanceof Uint8Array ||\n                                _0x3e840b instanceof Uint8ClampedArray\n                            )\n                        ) {\n                            return void this.mem.setUint8(_0x2c7dbd + 0x30, 0x0);\n                        }\n                        const _0x2d9d42 = _0x47be1d.subarray(0x0, _0x3e840b.length);\n                        _0x3e840b.set(_0x2d9d42);\n                        setMemoryValue(_0x2c7dbd + 0x28, _0x2d9d42.length);\n                        this.mem.setUint8(_0x2c7dbd + 0x30, 0x1);\n                    },\n                    debug: (_0x5560e3) => {\n                        console.log(_0x5560e3);\n                    },\n                },\n            };\n        }\n        run(_0x3a3ab2) {\n            return processAsync(this, null, function* () {\n                if (!(_0x3a3ab2 instanceof WebAssembly.Instance)) {\n                    throw new Error(\"Go.run: WebAssembly.Instance expected\");\n                }\n                this._inst = _0x3a3ab2;\n                this.mem = new DataView(this._inst.exports.mem.buffer);\n                this._values = [NaN, 0x0, null, true, false, globalThis, this];\n                this._goRefCounts = new Array(this._values.length).fill(Infinity);\n                this._ids = new Map([\n                    [0x0, 0x1],\n                    [null, 0x2],\n                    [true, 0x3],\n                    [false, 0x4],\n                    [globalThis, 0x5],\n                    [this, 0x6],\n                ]);\n                this._idPool = [];\n                this.exited = false;\n                let _0x5c27d6 = 0x1000;\n                const _0x17ab00 = (_0x592ac2) => {\n                    const _0x42047b = _0x5c27d6;\n                    const _0x169394 = TextEncoderUnicode.encode(_0x592ac2 + \"\\0\");\n                    new Uint8Array(this.mem.buffer, _0x5c27d6, _0x169394.length).set(\n                        _0x169394,\n                    );\n                    _0x5c27d6 += _0x169394.length;\n                    if (_0x5c27d6 % 0x8 != 0x0) {\n                        _0x5c27d6 += 0x8 - (_0x5c27d6 % 0x8);\n                    }\n                    return _0x42047b;\n                };\n                const _0x33ce5b = this.argv.length;\n                const _0x1d93e4 = [];\n                this.argv.forEach((_0x2b450c) => {\n                    _0x1d93e4.push(_0x17ab00(_0x2b450c));\n                });\n                _0x1d93e4.push(0x0);\n                Object.keys(this.env)\n                    .sort()\n                    .forEach((_0x5793a5) => {\n                        _0x1d93e4.push(_0x17ab00(_0x5793a5 + \"=\" + this.env[_0x5793a5]));\n                    });\n                _0x1d93e4.push(0x0);\n                const _0x1563af = _0x5c27d6;\n                _0x1d93e4.forEach((_0x2954fa) => {\n                    this.mem.setUint32(_0x5c27d6, _0x2954fa, true);\n                    this.mem.setUint32(_0x5c27d6 + 0x4, 0x0, true);\n                    _0x5c27d6 += 0x8;\n                });\n                if (_0x5c27d6 >= 0x3000) {\n                    throw new Error(\n                        \"total length of command line and environment variables exceeds limit\",\n                    );\n                }\n                this._inst.exports.run(_0x33ce5b, _0x1563af);\n                if (this.exited) {\n                    this._resolveExitPromise();\n                }\n                yield this._exitPromise;\n            });\n        }\n        _resume() {\n            if (this.exited) {\n                throw new Error(\"Go program has already exited\");\n            }\n            this._inst.exports.resume();\n            if (this.exited) {\n                this._resolveExitPromise();\n            }\n        }\n        _makeFuncWrapper(id) {\n            const this_ = this;\n            return function() {\n                const event = {\n                    id,\n                    this: this,\n                    args: arguments,\n                };\n                this_._pendingEvent = event;\n                this_._resume();\n                return event.result;\n            };\n        }\n    };\n})();\n\nexport default function(wasmBytes: Buffer, requestData: any, args1: string): Promise<string> {\n    return processAsync(this, null, function* () {\n        const go = new Go();\n        const instance = (yield WebAssembly.instantiate(wasmBytes, go.importObject))\n            .instance;\n        go.run(instance);\n        return globalThis.bder(JSON.stringify(requestData), args1);\n    });\n}","/*\n * MIT License\n *\n * Copyright (c) 2025 CookieGMVN and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { createWriteStream, existsSync } from 'fs';\nimport * as ort from 'onnxruntime-node';\nimport * as path from 'path';\nimport sharp from 'sharp';\nimport { request } from 'undici';\n\nconst dirPath = path.dirname(require.main ? require.main.filename : __filename);\n\n/**\n * OCR model for recognizing characters in images\n * @class\n */\nexport default class OCRModel {\n    /**\n     * Character set for recognition\n     * @private\n     * @type {string[]}\n     */\n    private chars: string[];\n\n    /**\n     * Path to the ONNX model file\n     * @private\n     * @type {string}\n     */\n    private modelPath: string;\n\n    /**\n     * ONNX inference session\n     * @private\n     * @type {ort.InferenceSession}\n     */\n    private session!: ort.InferenceSession;\n\n    /**\n     * Creates a new OCR model\n     * @param {string|null} modelPath - Optional custom path to the ONNX model file\n     */\n    public constructor(modelPath: string | null = null) {\n        // Create and sort the characters array (digits + letters)\n        this.chars = [];\n        // Add digits (0-9)\n        for (let i = 0; i < 10; i++) {\n            this.chars.push(String(i));\n        }\n        // Add lowercase and uppercase letters (a-z, A-Z)\n        for (let i = 97; i <= 122; i++) {\n            this.chars.push(String.fromCharCode(i));\n        }\n        for (let i = 65; i <= 90; i++) {\n            this.chars.push(String.fromCharCode(i));\n        }\n        this.chars.sort();\n\n        // Set the model path\n        this.modelPath = modelPath || path.join(dirPath, '/../model.onnx');\n    }\n\n    /**\n     * Loads the ONNX model for inference\n     * @returns {Promise<void>} A promise that resolves when the model is loaded\n     */\n    public async loadModel(): Promise<void> {\n        if (!existsSync(this.modelPath)) await this.downloadOnnxModel();\n        this.session = await ort.InferenceSession.create(this.modelPath);\n    }\n\n    /**\n     * Predicts text from an image\n     * @param {Buffer} imageBuffer - The image buffer to process\n     * @returns {Promise<string>} A promise that resolves to the recognized text\n     */\n    public async predict(imageBuffer: Buffer): Promise<string> {\n        // Convert image to grayscale and resize\n        const processedImage = await sharp(imageBuffer)\n            .grayscale()\n            .resize(160, 50)\n            .raw()\n            .toBuffer();\n\n        // Convert to float32 array and normalize to 0-1\n        const imageArray = new Float32Array(processedImage.length);\n        for (let i = 0; i < processedImage.length; i++) {\n            imageArray[i] = processedImage[i] / 255.0;\n        }\n\n        // Reshape to match the expected input shape [1, 1, 50, 160]\n        const tensor = new ort.Tensor('float32', imageArray, [1, 1, 50, 160]);\n\n        // Get input name\n        const inputName = this.session.inputNames[0];\n        const feeds: Record<string, ort.Tensor> = {};\n        feeds[inputName] = tensor;\n\n        // Run inference\n        const results = await this.session.run(feeds);\n        const outputData = Object.values(results)[0].data as Float32Array;\n        const outputShape = Object.values(results)[0].dims as number[];\n\n        // Process predictions\n        const pred = this.reshapeTensor(outputData, outputShape);\n        const predLabels = this.argmax(pred, 2);\n\n        // Convert label indices to characters\n        let predText = '';\n        for (const label of predLabels[0]) {\n            if (label >= 0 && label < this.chars.length) {\n                predText += this.chars[label];\n            }\n        }\n\n        return predText;\n    }\n\n    /**\n     * Downloads the ONNX model from GitHub\n     * @private\n     * @returns {Promise<void>} A promise that resolves when the model is downloaded\n     * @throws {Error} If the download fails\n     */\n    private async downloadOnnxModel(): Promise<void> {\n        try {\n            // Make the HTTP request\n            const model = await request(\"https://github.com/thedtvn/mbbank-capcha-ocr/raw/refs/heads/master/mb_capcha_ocr/model.onnx\", {\n                maxRedirections: 10,\n                headers: {\n                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n                },\n            });\n\n            // Create a write stream\n            const fileStream = createWriteStream(this.modelPath);\n\n            // Pipe the response body to the file\n            await new Promise<void>((resolve, reject) => {\n                model.body.pipe(fileStream);\n\n                model.body.on('error', (err) => {\n                    reject(err);\n                });\n\n                fileStream.on('finish', () => {\n                    resolve();\n                });\n\n                fileStream.on('error', (err: Error) => {\n                    reject(err);\n                });\n            });\n        } catch (error) {\n            console.error('Error downloading model:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Reshapes a flat tensor into a 3D array\n     * @private\n     * @param {Float32Array} data - The flat tensor data\n     * @param {number[]} shape - The target shape [batchSize, seqLength, numClasses]\n     * @returns {number[][][]} Reshaped 3D array\n     */\n    private reshapeTensor(data: Float32Array, shape: number[]): number[][][] {\n        const result: number[][][] = [];\n        const [batchSize, seqLength, numClasses] = shape;\n\n        for (let b = 0; b < batchSize; b++) {\n            const batchResult: number[][] = [];\n            for (let s = 0; s < seqLength; s++) {\n                const classProbs: number[] = [];\n                for (let c = 0; c < numClasses; c++) {\n                    const idx = b * seqLength * numClasses + s * numClasses + c;\n                    classProbs.push(data[idx]);\n                }\n                batchResult.push(classProbs);\n            }\n            result.push(batchResult);\n        }\n\n        return result;\n    }\n\n    /**\n     * Computes argmax along a specified axis\n     * @private\n     * @param {number[][][]} tensor - The input tensor\n     * @param {number} axis - The axis along which to compute argmax (only 2 is supported)\n     * @returns {number[][]} The indices of maximum values\n     */\n    private argmax(tensor: number[][][], axis: number): number[][] {\n        const result: number[][] = [];\n\n        if (axis === 2) {\n            for (let b = 0; b < tensor.length; b++) {\n                const batchResult: number[] = [];\n                for (let s = 0; s < tensor[b].length; s++) {\n                    let maxIdx = 0;\n                    let maxVal = tensor[b][s][0];\n\n                    for (let c = 1; c < tensor[b][s].length; c++) {\n                        if (tensor[b][s][c] > maxVal) {\n                            maxVal = tensor[b][s][c];\n                            maxIdx = c;\n                        }\n                    }\n\n                    batchResult.push(maxIdx);\n                }\n                result.push(batchResult);\n            }\n        }\n\n        return result;\n    }\n}","/*\n * MIT License\n *\n * Copyright (c) 2025 CookieGMVN and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { recognize } from \"node-tesseract-ocr\";\n\nimport { cutBorder, defaultTesseractConfig, replaceColor } from \"./Global\";\n\n/**\n * Utility class for working with Tesseract OCR for captcha recognition\n */\nexport default class TesseractUtils {\n    /**\n     * Cleans a captcha image to improve OCR recognition accuracy\n     *\n     * @param {Buffer} image - The raw captcha image buffer\n     * @returns {Promise<Buffer>} A promise that resolves to the cleaned image buffer\n     *\n     * @example\n     * ```typescript\n     * // Clean captcha image for better OCR recognition\n     * const rawImage = fs.readFileSync('./captcha.png');\n     * const cleanedImage = await TesseractUtils.cleanImage(rawImage);\n     * ```\n     */\n    public static async cleanImage(image: Buffer): Promise<Buffer> {\n        // Phase 1 - Replace #857069 with #ffffff\n        image = await replaceColor({\n            image,\n            target: \"#857069\",\n            replace: \"#ffffff\",\n        });\n\n        // Phase 2 - Replase #ffe4d6 with #ffffff\n        image = await replaceColor({\n            image,\n            target: \"#ffe4d6\",\n            replace: \"#ffffff\",\n        });\n\n        // Phase 3 - Cut border by 1px\n        image = await cutBorder({\n            image,\n            borderWidth: 1,\n        });\n\n        return image;\n    }\n\n    /**\n     * Recognizes text from a captcha image using Tesseract OCR\n     *\n     * @param {Buffer} image - The captcha image buffer to process\n     * @returns {Promise<string|null>} A promise that resolves to the recognized text, or null if recognition failed\n     *\n     * @example\n     * ```typescript\n     * // Recognize text from a captcha image\n     * const captchaImage = fs.readFileSync('./captcha.png');\n     * const recognizedText = await TesseractUtils.recognizeText(captchaImage);\n     *\n     * if (recognizedText) {\n     *   console.log('Captcha text:', recognizedText);\n     * } else {\n     *   console.log('Failed to recognize captcha');\n     * }\n     * ```\n     */\n    public static async recognizeText(image: Buffer): Promise<string | null> {\n        // Clean the image before processing\n        image = await this.cleanImage(image);\n\n        // Recognize text from the image\n        const captchaContent = await recognize(image, defaultTesseractConfig);\n\n        captchaContent.replaceAll(\"\\n\", \"\");\n        captchaContent.replaceAll(\" \", \"\");\n        captchaContent.slice(0, -1);\n\n        if ((captchaContent.length !== 6) || !(/^[a-z0-9]+$/i.test(captchaContent))) {\n            return null;\n        }\n\n        return captchaContent;\n    }\n}","/*\n * MIT License\n *\n * Copyright (c) 2025 CookieGMVN and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { existsSync, readFileSync, writeFileSync } from \"fs\";\nimport { request } from \"undici\";\n\nimport { defaultHeaders } from \"./Global\";\n\n/**\n * Utility class for managing WebAssembly binary files\n */\nexport default class WasmUtils {\n    /**\n     * Downloads the WebAssembly binary from MB Bank's website\n     *\n     * @returns {Promise<Buffer>} A promise that resolves to the WebAssembly binary buffer\n     *\n     * @example\n     * ```typescript\n     * const wasmBinary = await WasmUtils.downloadWasm();\n     * // Use the WebAssembly binary for encryption\n     * ```\n     */\n    public static async downloadWasm(): Promise<Buffer> {\n        const wasm = await request(\"https://online.mbbank.com.vn/assets/wasm/main.wasm\", {\n            headers: defaultHeaders,\n        });\n\n        return Buffer.from(await wasm.body.arrayBuffer());\n    }\n\n    /**\n     * Loads WebAssembly binary, either by downloading it or retrieving from disk\n     *\n     * @param {string} [path] - Optional path to save/load the WebAssembly file\n     * @returns {Promise<Buffer>} A promise that resolves to the WebAssembly binary buffer\n     *\n     * @example\n     * ```typescript\n     * // Download the WASM file each time\n     * const wasmData = await WasmUtils.loadWasm();\n     *\n     * // Or save/load it from disk for caching\n     * const wasmData = await WasmUtils.loadWasm('./cache/main.wasm');\n     * ```\n     */\n    public static async loadWasm(path?: string): Promise<Buffer> {\n        if (!path) {\n            return this.downloadWasm();\n        }\n\n        if (!existsSync(path)) {\n            const wasm = await this.downloadWasm();\n\n            writeFileSync(path, (wasm as any), { encoding: \"binary\" });\n\n            return wasm;\n        }\n\n        return Buffer.from(readFileSync(path, \"binary\"), \"binary\");\n    }\n}"],"mappings":"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","names":["import_moment","import_undici","moment","Jimp","sharp","import_fs","import_undici","path","balanceData","moment"]}